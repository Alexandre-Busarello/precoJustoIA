generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String           @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  subscriptionTier SubscriptionTier @default(FREE)
  premiumExpiresAt DateTime?
  isAdmin          Boolean          @default(false) @map("is_admin")
  
  // Hist√≥rico Premium
  wasPremiumBefore Boolean          @default(false) @map("was_premium_before")
  firstPremiumAt   DateTime?        @map("first_premium_at")
  lastPremiumAt    DateTime?        @map("last_premium_at")
  premiumCount     Int              @default(0) @map("premium_count") // Quantas vezes foi Premium
  
  // Stripe Integration
  stripeCustomerId    String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId String?  @unique @map("stripe_subscription_id")
  stripePriceId       String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  
  accounts         Account[]
  sessions         Session[]
  portfolios       Portfolio[]
  rankingHistory   RankingHistory[]
  supportTickets   SupportTicket[]
  ticketMessages   TicketMessage[]
  assignedTickets  SupportTicket[] @relation("AssignedTickets")
  aiReportFeedbacks AIReportFeedback[]
  backtestConfigs  BacktestConfig[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@index([token])
  @@map("password_reset_tokens")
}

model Company {
  id                Int                      @id @default(autoincrement())
  ticker            String                   @unique
  name              String
  sector            String?
  industry          String?
  cnpj              String?
  description       String?
  website           String?
  address           String?
  city              String?
  state             String?
  country           String?
  fullTimeEmployees Int?
  logoUrl           String?
  updatedAt         DateTime?                @updatedAt
  address2          String?
  address3          String?
  fax               String?
  industryDisp      String?
  industryKey       String?
  phone             String?
  sectorDisp        String?
  sectorKey         String?
  zip               String?
  dailyQuotes       DailyQuote[]
  historicalPrices  HistoricalPrice[]
  financialData     FinancialData[]
  balanceSheets     BalanceSheet[]
  incomeStatements  IncomeStatement[]
  cashflowStatements CashflowStatement[]
  keyStatistics     KeyStatistics[]
  valueAddedStatements ValueAddedStatement[]
  priceOscillations PriceOscillations[]
  quarterlyFinancials QuarterlyFinancials[]
  aiReports       AIReport[]

  @@index([sector])
  @@index([industry])
  @@index([sector, industry])
  @@map("companies")
}

model FinancialData {
  id                         Int       @id @default(autoincrement())
  companyId                  Int       @map("company_id")
  year                       Int
  pl                         Decimal?  @db.Decimal(15, 6)
  forwardPE                  Decimal?  @map("forward_pe") @db.Decimal(15, 6)
  earningsYield              Decimal?  @map("earnings_yield") @db.Decimal(15, 6)
  pvp                        Decimal?  @db.Decimal(15, 6)
  dy                         Decimal?  @db.Decimal(15, 6)
  evEbitda                   Decimal?  @map("ev_ebitda") @db.Decimal(15, 6)
  evEbit                     Decimal?  @map("ev_ebit") @db.Decimal(15, 6)
  evRevenue                  Decimal?  @map("ev_revenue") @db.Decimal(15, 6)
  psr                        Decimal?  @db.Decimal(15, 6)
  pAtivos                    Decimal?  @map("p_ativos") @db.Decimal(15, 6)
  pCapGiro                   Decimal?  @map("p_cap_giro") @db.Decimal(15, 6)
  pEbit                      Decimal?  @map("p_ebit") @db.Decimal(15, 6)
  lpa                        Decimal?  @db.Decimal(15, 6)
  trailingEps                Decimal?  @map("trailing_eps") @db.Decimal(15, 6)
  vpa                        Decimal?  @db.Decimal(15, 6)
  marketCap                  Decimal?  @map("market_cap") @db.Decimal(20, 2)
  enterpriseValue            Decimal?  @map("enterprise_value") @db.Decimal(20, 2)
  sharesOutstanding          Decimal?  @map("shares_outstanding") @db.Decimal(20, 0)
  totalAssets                Decimal?  @map("total_assets") @db.Decimal(20, 2)
  dividaLiquidaPl            Decimal?  @map("divida_liquida_pl") @db.Decimal(15, 6)
  dividaLiquidaEbitda        Decimal?  @map("divida_liquida_ebitda") @db.Decimal(15, 6)
  liquidezCorrente           Decimal?  @map("liquidez_corrente") @db.Decimal(15, 6)
  liquidezRapida             Decimal?  @map("liquidez_rapida") @db.Decimal(15, 6)
  passivoAtivos              Decimal?  @map("passivo_ativos") @db.Decimal(15, 6)
  debtToEquity               Decimal?  @map("debt_to_equity") @db.Decimal(15, 6)
  roe                        Decimal?  @db.Decimal(15, 6)
  roic                       Decimal?  @db.Decimal(15, 6)
  roa                        Decimal?  @db.Decimal(15, 6)
  margemBruta                Decimal?  @map("margem_bruta") @db.Decimal(15, 6)
  margemEbitda               Decimal?  @map("margem_ebitda") @db.Decimal(15, 6)
  margemLiquida              Decimal?  @map("margem_liquida") @db.Decimal(15, 6)
  giroAtivos                 Decimal?  @map("giro_ativos") @db.Decimal(15, 6)
  cagrLucros5a               Decimal?  @map("cagr_lucros_5a") @db.Decimal(15, 6)
  cagrReceitas5a             Decimal?  @map("cagr_receitas_5a") @db.Decimal(15, 6)
  crescimentoLucros          Decimal?  @map("crescimento_lucros") @db.Decimal(15, 6)
  crescimentoReceitas        Decimal?  @map("crescimento_receitas") @db.Decimal(15, 6)
  dividendYield12m           Decimal?  @map("dividend_yield_12m") @db.Decimal(15, 6)
  ultimoDividendo            Decimal?  @map("ultimo_dividendo") @db.Decimal(15, 6)
  dataUltimoDividendo        DateTime? @map("data_ultimo_dividendo") @db.Date
  payout                     Decimal?  @db.Decimal(15, 6)
  variacao52Semanas          Decimal?  @map("variacao_52_semanas") @db.Decimal(15, 6)
  retornoAnoAtual            Decimal?  @map("retorno_ano_atual") @db.Decimal(15, 6)
  ebitda                     Decimal?  @db.Decimal(20, 2)
  receitaTotal               Decimal?  @map("receita_total") @db.Decimal(20, 2)
  lucroLiquido               Decimal?  @map("lucro_liquido") @db.Decimal(20, 2)
  fluxoCaixaOperacional      Decimal?  @map("fluxo_caixa_operacional") @db.Decimal(20, 2)
  fluxoCaixaInvestimento     Decimal?  @map("fluxo_caixa_investimento") @db.Decimal(20, 2)
  fluxoCaixaFinanciamento    Decimal?  @map("fluxo_caixa_financiamento") @db.Decimal(20, 2)
  fluxoCaixaLivre            Decimal?  @map("fluxo_caixa_livre") @db.Decimal(20, 2)
  totalCaixa                 Decimal?  @map("total_caixa") @db.Decimal(20, 2)
  totalDivida                Decimal?  @map("total_divida") @db.Decimal(20, 2)
  receitaPorAcao             Decimal?  @map("receita_por_acao") @db.Decimal(15, 6)
  caixaPorAcao               Decimal?  @map("caixa_por_acao") @db.Decimal(15, 6)
  ativoCirculante            Decimal?  @map("ativo_circulante") @db.Decimal(20, 2)
  ativoTotal                 Decimal?  @map("ativo_total") @db.Decimal(20, 2)
  passivoCirculante          Decimal?  @map("passivo_circulante") @db.Decimal(20, 2)
  passivoTotal               Decimal?  @map("passivo_total") @db.Decimal(20, 2)
  patrimonioLiquido          Decimal?  @map("patrimonio_liquido") @db.Decimal(20, 2)
  caixa                      Decimal?  @db.Decimal(20, 2)
  estoques                   Decimal?  @db.Decimal(20, 2)
  contasReceber              Decimal?  @map("contas_receber") @db.Decimal(20, 2)
  imobilizado                Decimal?  @db.Decimal(20, 2)
  intangivel                 Decimal?  @db.Decimal(20, 2)
  dividaCirculante           Decimal?  @map("divida_circulante") @db.Decimal(20, 2)
  dividaLongoPrazo           Decimal?  @map("divida_longo_prazo") @db.Decimal(20, 2)
  dividendoMaisRecente       Decimal?  @map("dividendo_mais_recente") @db.Decimal(15, 6)
  dataDividendoMaisRecente   DateTime? @map("data_dividendo_mais_recente") @db.Date
  historicoUltimosDividendos String?   @map("historico_ultimos_dividendos")
  updatedAt                  DateTime? @updatedAt
  dataSource                 String?   @default("brapi") @map("data_source")
  company                    Company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, year])
  @@index([companyId, year])
  @@index([year])
  @@map("financial_data")
}

model DailyQuote {
  id        Int      @id @default(autoincrement())
  companyId Int      @map("company_id")
  date      DateTime @db.Date
  price     Decimal  @db.Decimal(10, 4)
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, date])
  @@index([companyId, date])
  @@index([date])
  @@map("daily_quotes")
}

// Dados hist√≥ricos para gr√°ficos candlestick (mensais)
model HistoricalPrice {
  id            Int      @id @default(autoincrement())
  companyId     Int      @map("company_id")
  date          DateTime @db.Date
  open          Decimal  @db.Decimal(10, 4)
  high          Decimal  @db.Decimal(10, 4)
  low           Decimal  @db.Decimal(10, 4)
  close         Decimal  @db.Decimal(10, 4)
  volume        BigInt
  adjustedClose Decimal  @map("adjusted_close") @db.Decimal(10, 4)
  interval      String   @default("1mo") // 1d, 1wk, 1mo
  updatedAt     DateTime @updatedAt @map("updated_at")
  company       Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, date, interval])
  @@index([companyId, interval, date]) // √çndice existente otimizado
  @@index([date]) // √çndice existente
  @@index([interval, date]) // Otimiza√ß√£o para consultas por intervalo e per√≠odo
  @@index([companyId, date]) // Otimiza√ß√£o para consultas de ticker espec√≠fico por per√≠odo
  @@map("historical_prices")
}

model Portfolio {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  name      String
  createdAt DateTime         @default(now()) @map("created_at")
  assets    PortfolioAsset[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model PortfolioAsset {
  id              String    @id @default(cuid())
  portfolioId     String    @map("portfolio_id")
  ticker          String
  initialQuantity Decimal   @map("initial_quantity") @db.Decimal(10, 4)
  initialPrice    Decimal   @map("initial_price") @db.Decimal(10, 4)
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("portfolio_assets")
}

model RankingHistory {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  model       String
  params      Json
  results     Json?
  resultCount Int      @default(0) @map("result_count")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ranking_history")
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

enum ReportPeriod {
  YEARLY
  QUARTERLY
}

enum ProcessingPhase {
  DISCOVERING
  PROCESSING_HISTORICAL
  PROCESSING_TTM
  COMPLETED
  ERROR
}

enum TickerStatus {
  PENDING         // Ainda n√£o processado
  PROCESSING      // Em processamento no momento
  COMPLETED       // Processamento completo (todos os dados)
  PARTIAL         // Processamento parcial (alguns dados faltando)
  ERROR           // Erro no processamento
  SKIPPED         // Pulado por algum motivo (ex: ticker inv√°lido)
}

// Status de processamento individual por ticker
model TickerProcessingStatus {
  id                    Int                    @id @default(autoincrement())
  ticker                String                 @unique
  processType           String                 @default("ward_data_fetch") @map("process_type")
  status                TickerStatus @default(PENDING)
  hasBasicData          Boolean                @default(false) @map("has_basic_data")
  hasHistoricalData     Boolean                @default(false) @map("has_historical_data")
  hasTTMData            Boolean                @default(false) @map("has_ttm_data")
  hasBrapiProData       Boolean                @default(false) @map("has_brapi_pro_data")
  lastProcessedAt       DateTime?              @map("last_processed_at")
  lastSuccessAt         DateTime?              @map("last_success_at")
  lastError             String?                @map("last_error")
  errorCount            Int                    @default(0) @map("error_count")
  priority              Int                    @default(0) // 0=normal, 1=high, 2=urgent
  metadata              Json?
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")

  @@index([processType, status])
  @@index([lastProcessedAt])
  @@index([priority, status])
  @@map("ticker_processing_status")
}

// Balan√ßo Patrimonial
model BalanceSheet {
  id                                                    Int           @id @default(autoincrement())
  companyId                                             Int           @map("company_id")
  period                                                ReportPeriod  @default(YEARLY)
  endDate                                               DateTime      @map("end_date") @db.Date
  
  // Ativo Circulante
  cash                                                  Decimal?      @db.Decimal(20, 2)
  shortTermInvestments                                  Decimal?      @map("short_term_investments") @db.Decimal(20, 2)
  totalCurrentAssets                                    Decimal?      @map("total_current_assets") @db.Decimal(20, 2)
  
  // Ativo N√£o Circulante
  longTermInvestments                                   Decimal?      @map("long_term_investments") @db.Decimal(20, 2)
  otherAssets                                           Decimal?      @map("other_assets") @db.Decimal(20, 2)
  totalAssets                                           Decimal?      @map("total_assets") @db.Decimal(20, 2)
  
  // Passivo Circulante
  totalCurrentLiabilities                               Decimal?      @map("total_current_liabilities") @db.Decimal(20, 2)
  
  // Passivo Total
  totalLiab                                             Decimal?      @map("total_liab") @db.Decimal(20, 2)
  
  // Patrim√¥nio L√≠quido
  commonStock                                           Decimal?      @map("common_stock") @db.Decimal(20, 2)
  treasuryStock                                         Decimal?      @map("treasury_stock") @db.Decimal(20, 2)
  totalStockholderEquity                                Decimal?      @map("total_stockholder_equity") @db.Decimal(20, 2)
  netTangibleAssets                                     Decimal?      @map("net_tangible_assets") @db.Decimal(20, 2)
  goodWill                                              Decimal?      @map("good_will") @db.Decimal(20, 2)
  
  // Campos espec√≠ficos para institui√ß√µes financeiras
  financialAssets                                       Decimal?      @map("financial_assets") @db.Decimal(20, 2)
  centralBankCompulsoryDeposit                          Decimal?      @map("central_bank_compulsory_deposit") @db.Decimal(20, 2)
  financialAssetsMeasuredAtFairValueThroughProfitOrLoss Decimal?      @map("financial_assets_measured_at_fair_value_through_profit_or_loss") @db.Decimal(20, 2)
  longTermAssets                                        Decimal?      @map("long_term_assets") @db.Decimal(20, 2)
  creditsFromOperations                                 Decimal?      @map("credits_from_operations") @db.Decimal(20, 2)
  complementaryPension                                  Decimal?      @map("complementary_pension") @db.Decimal(20, 2)
  deferredSellingExpenses                               Decimal?      @map("deferred_selling_expenses") @db.Decimal(20, 2)
  nonCurrentAssets                                      Decimal?      @map("non_current_assets") @db.Decimal(20, 2)
  deferredTaxes                                         Decimal?      @map("deferred_taxes") @db.Decimal(20, 2)
  financialLiabilitiesMeasuredAtFairValueThroughIncome  Decimal?      @map("financial_liabilities_measured_at_fair_value_through_income") @db.Decimal(20, 2)
  financialLiabilitiesAtAmortizedCost                   Decimal?      @map("financial_liabilities_at_amortized_cost") @db.Decimal(20, 2)
  provisions                                            Decimal?      @db.Decimal(20, 2)
  shareholdersEquity                                    Decimal?      @map("shareholders_equity") @db.Decimal(20, 2)
  realizedShareCapital                                  Decimal?      @map("realized_share_capital") @db.Decimal(20, 2)
  profitReserves                                        Decimal?      @map("profit_reserves") @db.Decimal(20, 2)
  accumulatedProfitsOrLosses                            Decimal?      @map("accumulated_profits_or_losses") @db.Decimal(20, 2)
  equityValuationAdjustments                            Decimal?      @map("equity_valuation_adjustments") @db.Decimal(20, 2)
  currentLiabilities                                    Decimal?      @map("current_liabilities") @db.Decimal(20, 2)
  nonCurrentLiabilities                                 Decimal?      @map("non_current_liabilities") @db.Decimal(20, 2)
  thirdPartyDeposits                                    Decimal?      @map("third_party_deposits") @db.Decimal(20, 2)
  otherDebits                                           Decimal?      @map("other_debits") @db.Decimal(20, 2)
  
  updatedAt                                             DateTime?     @updatedAt
  company                                               Company       @relation(fields: [companyId], references: [id])

  @@unique([companyId, endDate, period])
  @@index([companyId, period, endDate])
  @@index([endDate])
  @@map("balance_sheets")
}

// Demonstra√ß√£o do Resultado do Exerc√≠cio (DRE)
model IncomeStatement {
  id                                                    Int           @id @default(autoincrement())
  companyId                                             Int           @map("company_id")
  period                                                ReportPeriod  @default(YEARLY)
  endDate                                               DateTime      @map("end_date") @db.Date
  
  // Receitas e Custos
  totalRevenue                                          Decimal?      @map("total_revenue") @db.Decimal(20, 2)
  costOfRevenue                                         Decimal?      @map("cost_of_revenue") @db.Decimal(20, 2)
  grossProfit                                           Decimal?      @map("gross_profit") @db.Decimal(20, 2)
  
  // Despesas Operacionais
  researchDevelopment                                   Decimal?      @map("research_development") @db.Decimal(20, 2)
  sellingGeneralAdministrative                          Decimal?      @map("selling_general_administrative") @db.Decimal(20, 2)
  nonRecurring                                          Decimal?      @map("non_recurring") @db.Decimal(20, 2)
  otherOperatingExpenses                                Decimal?      @map("other_operating_expenses") @db.Decimal(20, 2)
  totalOperatingExpenses                                Decimal?      @map("total_operating_expenses") @db.Decimal(20, 2)
  
  // Resultado Operacional
  operatingIncome                                       Decimal?      @map("operating_income") @db.Decimal(20, 2)
  totalOtherIncomeExpenseNet                            Decimal?      @map("total_other_income_expense_net") @db.Decimal(20, 2)
  ebit                                                  Decimal?      @db.Decimal(20, 2)
  
  // Resultado Financeiro
  interestExpense                                       Decimal?      @map("interest_expense") @db.Decimal(20, 2)
  incomeBeforeTax                                       Decimal?      @map("income_before_tax") @db.Decimal(20, 2)
  incomeTaxExpense                                      Decimal?      @map("income_tax_expense") @db.Decimal(20, 2)
  
  // Resultado L√≠quido
  minorityInterest                                      Decimal?      @map("minority_interest") @db.Decimal(20, 2)
  netIncomeFromContinuingOps                            Decimal?      @map("net_income_from_continuing_ops") @db.Decimal(20, 2)
  discontinuedOperations                                Decimal?      @map("discontinued_operations") @db.Decimal(20, 2)
  extraordinaryItems                                    Decimal?      @map("extraordinary_items") @db.Decimal(20, 2)
  effectOfAccountingCharges                             Decimal?      @map("effect_of_accounting_charges") @db.Decimal(20, 2)
  otherItems                                            Decimal?      @map("other_items") @db.Decimal(20, 2)
  netIncome                                             Decimal?      @map("net_income") @db.Decimal(20, 2)
  netIncomeApplicableToCommonShares                     Decimal?      @map("net_income_applicable_to_common_shares") @db.Decimal(20, 2)
  
  // Campos espec√≠ficos Brasil
  salesExpenses                                         Decimal?      @map("sales_expenses") @db.Decimal(20, 2)
  lossesDueToNonRecoverabilityOfAssets                  Decimal?      @map("losses_due_to_non_recoverability_of_assets") @db.Decimal(20, 2)
  otherOperatingIncome                                  Decimal?      @map("other_operating_income") @db.Decimal(20, 2)
  equityIncomeResult                                    Decimal?      @map("equity_income_result") @db.Decimal(20, 2)
  financialResult                                       Decimal?      @map("financial_result") @db.Decimal(20, 2)
  financialIncome                                       Decimal?      @map("financial_income") @db.Decimal(20, 2)
  financialExpenses                                     Decimal?      @map("financial_expenses") @db.Decimal(20, 2)
  currentTaxes                                          Decimal?      @map("current_taxes") @db.Decimal(20, 2)
  deferredTaxes                                         Decimal?      @map("deferred_taxes") @db.Decimal(20, 2)
  incomeBeforeStatutoryParticipationsAndContributions   Decimal?      @map("income_before_statutory_participations_and_contributions") @db.Decimal(20, 2)
  
  // Lucro por A√ß√£o
  basicEarningsPerCommonShare                           Decimal?      @map("basic_earnings_per_common_share") @db.Decimal(15, 6)
  dilutedEarningsPerCommonShare                         Decimal?      @map("diluted_earnings_per_common_share") @db.Decimal(15, 6)
  basicEarningsPerPreferredShare                        Decimal?      @map("basic_earnings_per_preferred_share") @db.Decimal(15, 6)
  dilutedEarningsPerPreferredShare                      Decimal?      @map("diluted_earnings_per_preferred_share") @db.Decimal(15, 6)
  profitSharingAndStatutoryContributions                Decimal?      @map("profit_sharing_and_statutory_contributions") @db.Decimal(20, 2)
  
  // Campos espec√≠ficos para seguradoras/bancos
  claimsAndOperationsCosts                              Decimal?      @map("claims_and_operations_costs") @db.Decimal(20, 2)
  administrativeCosts                                   Decimal?      @map("administrative_costs") @db.Decimal(20, 2)
  otherOperatingIncomeAndExpenses                       Decimal?      @map("other_operating_income_and_expenses") @db.Decimal(20, 2)
  earningsPerShare                                      Decimal?      @map("earnings_per_share") @db.Decimal(15, 6)
  basicEarningsPerShare                                 Decimal?      @map("basic_earnings_per_share") @db.Decimal(15, 6)
  dilutedEarningsPerShare                               Decimal?      @map("diluted_earnings_per_share") @db.Decimal(15, 6)
  insuranceOperations                                   Decimal?      @map("insurance_operations") @db.Decimal(20, 2)
  reinsuranceOperations                                 Decimal?      @map("reinsurance_operations") @db.Decimal(20, 2)
  complementaryPensionOperations                        Decimal?      @map("complementary_pension_operations") @db.Decimal(20, 2)
  capitalizationOperations                              Decimal?      @map("capitalization_operations") @db.Decimal(20, 2)
  
  updatedAt                                             DateTime?     @updatedAt
  company                                               Company       @relation(fields: [companyId], references: [id])

  @@unique([companyId, endDate, period])
  @@index([companyId, period, endDate])
  @@index([endDate])
  @@map("income_statements")
}

// Demonstra√ß√£o do Fluxo de Caixa (DFC)
model CashflowStatement {
  id                          Int           @id @default(autoincrement())
  companyId                   Int           @map("company_id")
  period                      ReportPeriod  @default(YEARLY)
  endDate                     DateTime      @map("end_date") @db.Date
  
  // Fluxo de Caixa Operacional
  operatingCashFlow           Decimal?      @map("operating_cash_flow") @db.Decimal(20, 2)
  incomeFromOperations        Decimal?      @map("income_from_operations") @db.Decimal(20, 2)
  netIncomeBeforeTaxes        Decimal?      @map("net_income_before_taxes") @db.Decimal(20, 2)
  adjustmentsToProfitOrLoss   Decimal?      @map("adjustments_to_profit_or_loss") @db.Decimal(20, 2)
  changesInAssetsAndLiabilities Decimal?    @map("changes_in_assets_and_liabilities") @db.Decimal(20, 2)
  otherOperatingActivities    Decimal?      @map("other_operating_activities") @db.Decimal(20, 2)
  
  // Fluxo de Caixa de Investimento
  investmentCashFlow          Decimal?      @map("investment_cash_flow") @db.Decimal(20, 2)
  
  // Fluxo de Caixa de Financiamento
  financingCashFlow           Decimal?      @map("financing_cash_flow") @db.Decimal(20, 2)
  
  // Varia√ß√£o do Caixa
  increaseOrDecreaseInCash    Decimal?      @map("increase_or_decrease_in_cash") @db.Decimal(20, 2)
  initialCashBalance          Decimal?      @map("initial_cash_balance") @db.Decimal(20, 2)
  finalCashBalance            Decimal?      @map("final_cash_balance") @db.Decimal(20, 2)
  cashGeneratedInOperations   Decimal?      @map("cash_generated_in_operations") @db.Decimal(20, 2)
  
  updatedAt                   DateTime?     @updatedAt
  company                     Company       @relation(fields: [companyId], references: [id])

  @@unique([companyId, endDate, period])
  @@index([companyId, period, endDate])
  @@index([endDate])
  @@map("cashflow_statements")
}

// Principais Estat√≠sticas
model KeyStatistics {
  id                        Int           @id @default(autoincrement())
  companyId                 Int           @map("company_id")
  period                    ReportPeriod  @default(YEARLY)
  endDate                   DateTime      @map("end_date") @db.Date
  
  // Valuation
  enterpriseValue           Decimal?      @map("enterprise_value") @db.Decimal(20, 2)
  forwardPE                 Decimal?      @map("forward_pe") @db.Decimal(15, 6)
  profitMargins             Decimal?      @map("profit_margins") @db.Decimal(15, 6)
  sharesOutstanding         Decimal?      @map("shares_outstanding") @db.Decimal(20, 0)
  bookValue                 Decimal?      @map("book_value") @db.Decimal(15, 6)
  priceToBook               Decimal?      @map("price_to_book") @db.Decimal(15, 6)
  
  // Crescimento
  mostRecentQuarter         DateTime?     @map("most_recent_quarter") @db.Date
  earningsQuarterlyGrowth   Decimal?      @map("earnings_quarterly_growth") @db.Decimal(15, 6)
  earningsAnnualGrowth      Decimal?      @map("earnings_annual_growth") @db.Decimal(15, 6)
  
  // Indicadores
  trailingEps               Decimal?      @map("trailing_eps") @db.Decimal(15, 6)
  enterpriseToRevenue       Decimal?      @map("enterprise_to_revenue") @db.Decimal(15, 6)
  enterpriseToEbitda        Decimal?      @map("enterprise_to_ebitda") @db.Decimal(15, 6)
  
  // Performance
  fiftyTwoWeekChange        Decimal?      @map("fifty_two_week_change") @db.Decimal(15, 6)
  ytdReturn                 Decimal?      @map("ytd_return") @db.Decimal(15, 6)
  
  // Dividendos
  lastDividendValue         Decimal?      @map("last_dividend_value") @db.Decimal(15, 6)
  lastDividendDate          DateTime?     @map("last_dividend_date") @db.Date
  dividendYield             Decimal?      @map("dividend_yield") @db.Decimal(15, 6)
  
  // Outros
  totalAssets               Decimal?      @map("total_assets") @db.Decimal(20, 2)
  
  updatedAt                 DateTime?     @updatedAt
  company                   Company       @relation(fields: [companyId], references: [id])

  @@unique([companyId, endDate, period])
  @@map("key_statistics")
}

// Demonstra√ß√£o do Valor Adicionado (DVA)
model ValueAddedStatement {
  id                                    Int           @id @default(autoincrement())
  companyId                             Int           @map("company_id")
  period                                ReportPeriod  @default(YEARLY)
  endDate                               DateTime      @map("end_date") @db.Date
  
  // Receitas
  revenue                               Decimal?      @db.Decimal(20, 2)
  financialIntermediationRevenue        Decimal?      @map("financial_intermediation_revenue") @db.Decimal(20, 2)
  
  updatedAt                             DateTime?     @updatedAt
  company                               Company       @relation(fields: [companyId], references: [id])

  @@unique([companyId, endDate, period])
  @@map("value_added_statements")
}

// Sistema de Tickets de Suporte
model SupportTicket {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  title       String
  description String
  status      TicketStatus  @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  category    TicketCategory @default(GENERAL)
  assignedTo  String?       @map("assigned_to") // ID do admin respons√°vel
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  closedAt    DateTime?     @map("closed_at")
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee    User?         @relation("AssignedTickets", fields: [assignedTo], references: [id])
  messages    TicketMessage[]

  @@index([userId])
  @@index([status])
  @@index([assignedTo])
  @@index([createdAt])
  @@map("support_tickets")
}

model TicketMessage {
  id        String   @id @default(cuid())
  ticketId  String   @map("ticket_id")
  userId    String   @map("user_id")
  message   String
  isInternal Boolean @default(false) @map("is_internal") // Mensagens internas apenas para admins
  createdAt DateTime @default(now()) @map("created_at")
  
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
  @@index([createdAt])
  @@map("ticket_messages")
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  WAITING_ADMIN
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketCategory {
  GENERAL
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
  ACCOUNT
}

// Oscila√ß√µes de Pre√ßo (dados do Fundamentus)
model PriceOscillations {
  id                    Int       @id @default(autoincrement())
  companyId             Int       @map("company_id")
  extractionDate        DateTime  @map("extraction_date") @db.Date
  
  // Varia√ß√µes de pre√ßo
  variationDay          Decimal?  @map("variation_day") @db.Decimal(15, 6)
  variationMonth        Decimal?  @map("variation_month") @db.Decimal(15, 6)
  variation30Days       Decimal?  @map("variation_30_days") @db.Decimal(15, 6)
  variation12Months     Decimal?  @map("variation_12_months") @db.Decimal(15, 6)
  
  // Varia√ß√µes anuais (√∫ltimos 6 anos)
  variation2025         Decimal?  @map("variation_2025") @db.Decimal(15, 6)
  variation2024         Decimal?  @map("variation_2024") @db.Decimal(15, 6)
  variation2023         Decimal?  @map("variation_2023") @db.Decimal(15, 6)
  variation2022         Decimal?  @map("variation_2022") @db.Decimal(15, 6)
  variation2021         Decimal?  @map("variation_2021") @db.Decimal(15, 6)
  variation2020         Decimal?  @map("variation_2020") @db.Decimal(15, 6)
  
  // Informa√ß√µes adicionais
  min52Weeks            Decimal?  @map("min_52_weeks") @db.Decimal(10, 4)
  max52Weeks            Decimal?  @map("max_52_weeks") @db.Decimal(10, 4)
  tradedVolumePerDay    Decimal?  @map("traded_volume_per_day") @db.Decimal(20, 2)
  
  updatedAt             DateTime? @updatedAt
  company               Company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, extractionDate])
  @@index([companyId, extractionDate])
  @@map("price_oscillations")
}

// Dados Trimestrais do Fundamentus
model QuarterlyFinancials {
  id                    Int       @id @default(autoincrement())
  companyId             Int       @map("company_id")
  extractionDate        DateTime  @map("extraction_date") @db.Date
  
  // Dados dos √∫ltimos 3 meses
  quarterlyRevenue      Decimal?  @map("quarterly_revenue") @db.Decimal(20, 2)
  quarterlyEbit         Decimal?  @map("quarterly_ebit") @db.Decimal(20, 2)
  quarterlyNetIncome    Decimal?  @map("quarterly_net_income") @db.Decimal(20, 2)
  
  // Dados dos √∫ltimos 12 meses (para compara√ß√£o)
  twelveMonthsRevenue   Decimal?  @map("twelve_months_revenue") @db.Decimal(20, 2)
  twelveMonthsEbit      Decimal?  @map("twelve_months_ebit") @db.Decimal(20, 2)
  twelveMonthsNetIncome Decimal?  @map("twelve_months_net_income") @db.Decimal(20, 2)
  
  updatedAt             DateTime? @updatedAt
  company               Company   @relation(fields: [companyId], references: [id])

  @@unique([companyId, extractionDate])
  @@index([companyId, extractionDate])
  @@map("quarterly_financials")
}

// Relat√≥rios de IA por empresa
model AIReport {
  id                String             @id @default(cuid())
  companyId         Int                @map("company_id")
  content           String             // Conte√∫do markdown do relat√≥rio
  strategicAnalyses Json?              // An√°lises estrat√©gicas aplicadas
  metadata          Json?              // Metadados adicionais (pre√ßo na √©poca, etc)
  version           Int                @default(1) // Vers√£o do relat√≥rio
  isActive          Boolean            @default(true) @map("is_active") // Se √© o relat√≥rio ativo
  status            ReportStatus       @default(COMPLETED) // Status do relat√≥rio
  likeCount         Int                @default(0) @map("like_count")
  dislikeCount      Int                @default(0) @map("dislike_count")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  feedbacks         AIReportFeedback[]

  @@index([companyId, isActive])
  @@index([companyId, createdAt])
  @@index([companyId, status])
  @@index([createdAt])
  @@map("ai_reports")
}

// Feedback dos usu√°rios sobre relat√≥rios de IA
model AIReportFeedback {
  id        String     @id @default(cuid())
  reportId  String     @map("report_id")
  userId    String     @map("user_id")
  type      FeedbackType // LIKE, DISLIKE
  comment   String?    // Coment√°rio opcional
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  
  report    AIReport   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId]) // Um usu√°rio s√≥ pode dar um feedback por relat√≥rio
  @@index([reportId])
  @@index([userId])
  @@map("ai_report_feedbacks")
}

enum FeedbackType {
  LIKE
  DISLIKE
}

enum ReportStatus {
  GENERATING  // Relat√≥rio sendo gerado
  COMPLETED   // Relat√≥rio finalizado
  FAILED      // Falha na gera√ß√£o
}

// ===== MODELOS DE BACKTESTING =====

// Configura√ß√µes de backtesting salvos pelo usu√°rio
model BacktestConfig {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  name              String   // Nome da simula√ß√£o
  description       String?  // Descri√ß√£o opcional
  
  // Par√¢metros da simula√ß√£o
  startDate         DateTime @map("start_date") @db.Date
  endDate           DateTime @map("end_date") @db.Date
  initialCapital    Decimal  @map("initial_capital") @db.Decimal(15, 2)     // Capital inicial
  monthlyContribution Decimal @map("monthly_contribution") @db.Decimal(12, 2)
  rebalanceFrequency String  @default("monthly") // monthly, quarterly, yearly
  
  // Metadados
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relacionamentos
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets            BacktestAsset[]
  results           BacktestResult[]
  transactions      BacktestTransaction[]
  
  @@index([userId, createdAt]) // Otimiza√ß√£o para listar configs do usu√°rio ordenadas por data
  @@index([userId, updatedAt]) // Otimiza√ß√£o para configs recentemente atualizadas
  @@map("backtest_configs")
}

// Ativos da carteira com aloca√ß√£o percentual
model BacktestAsset {
  id              String   @id @default(cuid())
  backtestId      String   @map("backtest_id")
  ticker          String
  targetAllocation Decimal @map("target_allocation") @db.Decimal(5, 4) // Ex: 0.2500 = 25%
  averageDividendYield Decimal? @map("average_dividend_yield") @db.Decimal(5, 4) // DY m√©dio dos √∫ltimos 5 anos (ex: 0.0850 = 8.50%)
  
  backtest        BacktestConfig @relation(fields: [backtestId], references: [id], onDelete: Cascade)
  
  @@unique([backtestId, ticker])
  @@index([backtestId]) // Otimiza√ß√£o para buscar ativos de um backtest espec√≠fico
  @@index([ticker]) // Otimiza√ß√£o para buscar backtests que usam um ticker espec√≠fico
  @@map("backtest_assets")
}

// Resultados da simula√ß√£o
model BacktestResult {
  id              String   @id @default(cuid())
  backtestId      String   @map("backtest_id")
  
  // M√©tricas gerais
  totalReturn     Decimal  @map("total_return") @db.Decimal(10, 4)     // Retorno total %
  annualizedReturn Decimal @map("annualized_return") @db.Decimal(10, 4) // Retorno anualizado %
  volatility      Decimal  @db.Decimal(10, 4)                          // Volatilidade anualizada %
  sharpeRatio     Decimal? @map("sharpe_ratio") @db.Decimal(10, 4)     // Sharpe Ratio
  maxDrawdown     Decimal  @map("max_drawdown") @db.Decimal(10, 4)     // Drawdown m√°ximo %
  
  // Estat√≠sticas de consist√™ncia
  positiveMonths  Int      @map("positive_months")
  negativeMonths  Int      @map("negative_months")
  totalMonths     Int      @map("total_months")
  
  // Valores finais
  totalInvested   Decimal  @map("total_invested") @db.Decimal(15, 2)   // Total aportado
  finalValue      Decimal  @map("final_value") @db.Decimal(15, 2)      // Valor final da carteira
  finalCashReserve Decimal? @map("final_cash_reserve") @db.Decimal(15, 2) // Saldo final em caixa
  totalDividendsReceived Decimal? @map("total_dividends_received") @db.Decimal(15, 2) // Total de dividendos recebidos
  
  // Dados detalhados (JSON)
  monthlyReturns  Json     @map("monthly_returns")    // Array de retornos mensais
  assetPerformance Json    @map("asset_performance")  // Performance por ativo
  portfolioEvolution Json  @map("portfolio_evolution") // Evolu√ß√£o m√™s a m√™s
  
  // Metadados
  calculatedAt    DateTime @default(now()) @map("calculated_at")
  
  backtest        BacktestConfig @relation(fields: [backtestId], references: [id], onDelete: Cascade)
  
  // Removido @@unique([backtestId]) para permitir m√∫ltiplos resultados por configura√ß√£o
  @@index([calculatedAt]) // Otimiza√ß√£o para buscar resultados por data de c√°lculo
  @@index([totalReturn]) // Otimiza√ß√£o para ordenar por performance
  @@index([annualizedReturn]) // Otimiza√ß√£o para comparar retornos anualizados
  @@map("backtest_results")
}

// Hist√≥rico detalhado de transa√ß√µes mensais
model BacktestTransaction {
  id              String   @id @default(cuid())
  backtestId      String   @map("backtest_id")
  
  // Dados da transa√ß√£o
  month           Int                                    // M√™s da simula√ß√£o (0, 1, 2...)
  date            DateTime @db.Date                      // Data da transa√ß√£o
  ticker          String                                 // Ativo transacionado (ou 'CASH' para reserva)
  transactionType String   @default("CONTRIBUTION")     // Tipo: CONTRIBUTION, REBALANCE_BUY, REBALANCE_SELL, CASH_RESERVE
  contribution    Decimal  @db.Decimal(12, 2)          // Valor aportado (pode ser negativo em rebalanceamentos)
  price           Decimal  @db.Decimal(10, 4)          // Pre√ßo de compra/venda
  sharesAdded     Decimal  @db.Decimal(15, 6)          // Quantidade de a√ß√µes adicionadas (pode ser negativo)
  totalShares     Decimal  @db.Decimal(15, 6)          // Total de a√ß√µes ap√≥s a transa√ß√£o
  totalInvested   Decimal  @db.Decimal(15, 2)          // Total investido no ativo at√© esta data
  cashReserved    Decimal? @db.Decimal(12, 2)          // Valor em caixa por n√£o conseguir comprar a√ß√£o inteira
  
  // Contexto do m√™s
  totalContribution Decimal @map("total_contribution") @db.Decimal(12, 2) // Aporte total do m√™s
  portfolioValue    Decimal @map("portfolio_value") @db.Decimal(15, 2)    // Valor da carteira ap√≥s rebalanceamento
  cashBalance       Decimal @map("cash_balance") @db.Decimal(12, 2) @default(0) // Saldo em caixa no final do m√™s
  
  // Relacionamento
  backtest        BacktestConfig @relation(fields: [backtestId], references: [id], onDelete: Cascade)
  
  @@index([backtestId, month]) // √çndice para consultas por backtest e m√™s (j√° existia)
  @@index([backtestId, ticker, month]) // Otimiza√ß√£o para an√°lise de ativo espec√≠fico por m√™s
  @@index([backtestId, transactionType]) // Otimiza√ß√£o para filtrar por tipo de transa√ß√£o
  @@index([backtestId, date]) // Otimiza√ß√£o para consultas por data
  @@index([ticker, transactionType]) // Otimiza√ß√£o para an√°lise cross-backtest por ticker
  @@map("backtest_transactions")
}
