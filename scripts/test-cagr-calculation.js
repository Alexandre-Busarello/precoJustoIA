#!/usr/bin/env node

/**
 * Script de teste para validar o c√°lculo correto do CAGR
 * Testa cen√°rios com anos de preju√≠zo no meio do per√≠odo
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient({
  log: ['warn', 'error']
});

// Fun√ß√£o de teste para calcular CAGR manualmente (nova l√≥gica completa)
function calculateCAGRManual(initialValue, finalValue, years) {
  if (initialValue === 0 || finalValue === 0) return null;
  
  if (initialValue > 0 && finalValue > 0) {
    // Cen√°rio 1: Lucro ‚Üí Lucro (CAGR tradicional)
    return Math.pow(finalValue / initialValue, 1 / years) - 1;
    
  } else if (initialValue < 0 && finalValue < 0) {
    // Cen√°rio 2: Preju√≠zo ‚Üí Preju√≠zo (melhoria na redu√ß√£o de preju√≠zo)
    return -(Math.pow(Math.abs(finalValue) / Math.abs(initialValue), 1 / years) - 1);
    
  } else if (initialValue < 0 && finalValue > 0) {
    // Cen√°rio 3: Preju√≠zo ‚Üí Lucro (recupera√ß√£o/turnaround)
    const recoveryBase = Math.abs(initialValue);
    const totalImprovement = finalValue + recoveryBase;
    return Math.pow(totalImprovement / recoveryBase, 1 / years) - 1;
    
  } else if (initialValue > 0 && finalValue < 0) {
    // Cen√°rio 4: Lucro ‚Üí Preju√≠zo (deteriora√ß√£o)
    const deteriorationBase = initialValue;
    const totalDeterioration = deteriorationBase + Math.abs(finalValue);
    return -(Math.pow(totalDeterioration / deteriorationBase, 1 / years) - 1);
  }
  
  return null;
}

async function testCAGRCalculation() {
  try {
    console.log('üß™ Testando c√°lculo de CAGR com nova l√≥gica...\n');
    
    // Buscar uma empresa com dados hist√≥ricos variados
    const company = await prisma.company.findFirst({
      where: {
        financialData: {
          some: {}
        }
      },
      include: {
        financialData: {
          orderBy: { year: 'asc' },
          take: 10 // √öltimos 10 anos para ter mais dados
        }
      }
    });
    
    if (!company || company.financialData.length < 5) {
      console.log('‚ùå Nenhuma empresa encontrada com dados suficientes');
      return;
    }
    
    console.log(`üìä Testando com empresa: ${company.ticker} (${company.name})`);
    console.log(`üìà Dados dispon√≠veis: ${company.financialData.length} anos\n`);
    
    // Mostrar dados hist√≥ricos
    console.log('üìã Dados Hist√≥ricos:');
    company.financialData.forEach(data => {
      const lucro = data.lucroLiquido ? Number(data.lucroLiquido) : null;
      const receita = data.receitaTotal ? Number(data.receitaTotal) : null;
      
      console.log(`  ${data.year}: Lucro=${lucro ? (lucro/1000000).toFixed(1) + 'M' : 'N/A'}, Receita=${receita ? (receita/1000000).toFixed(1) + 'M' : 'N/A'}`);
    });
    
    // Testar c√°lculo de CAGR para diferentes per√≠odos
    console.log('\nüîç Testando CAGR de Lucros:');
    
    for (let i = 4; i < company.financialData.length; i++) {
      const currentYear = company.financialData[i];
      const fiveYearsAgo = currentYear.year - 4;
      
      // Buscar dados do primeiro e √∫ltimo ano
      const firstYearData = company.financialData.find(d => d.year === fiveYearsAgo);
      const lastYearData = company.financialData.find(d => d.year === currentYear.year);
      
      if (firstYearData && lastYearData && 
          firstYearData.lucroLiquido && lastYearData.lucroLiquido) {
        
        const initialValue = Number(firstYearData.lucroLiquido);
        const finalValue = Number(lastYearData.lucroLiquido);
        const years = currentYear.year - fiveYearsAgo;
        
        const cagrManual = calculateCAGRManual(initialValue, finalValue, years);
        
        console.log(`  üìä ${currentYear.year} (${fiveYearsAgo}-${currentYear.year}):`);
        console.log(`    Inicial: ${(initialValue/1000000).toFixed(1)}M`);
        console.log(`    Final: ${(finalValue/1000000).toFixed(1)}M`);
        console.log(`    Per√≠odo: ${years} anos`);
        console.log(`    CAGR: ${cagrManual ? (cagrManual * 100).toFixed(2) + '%' : 'N/A'}`);
        
        // Verificar se h√° anos com preju√≠zo no meio
        const middleYears = company.financialData.filter(d => 
          d.year > fiveYearsAgo && d.year < currentYear.year
        );
        
        const hasLossYears = middleYears.some(d => 
          d.lucroLiquido && Number(d.lucroLiquido) < 0
        );
        
        if (hasLossYears) {
          console.log(`    ‚ö†Ô∏è  H√° anos com preju√≠zo no per√≠odo`);
        }
        
        console.log('');
      }
    }
    
    // Exemplo de cen√°rio problem√°tico (se existir)
    console.log('üéØ Cen√°rios de Teste:');
    
    // Cen√°rio 1: Crescimento constante
    console.log('\nüìà Cen√°rio 1 - Crescimento Constante:');
    const cagr1 = calculateCAGRManual(100, 200, 4);
    console.log(`  100 ‚Üí 200 em 4 anos: CAGR = ${(cagr1 * 100).toFixed(2)}%`);
    
    // Cen√°rio 2: Com preju√≠zo no meio
    console.log('\nüìâ Cen√°rio 2 - Com Preju√≠zo no Meio:');
    console.log('  Dados: 2020: 100, 2021: -50, 2022: 120, 2023: -20, 2024: 200');
    const cagr2 = calculateCAGRManual(100, 200, 4);
    console.log(`  L√≥gica NOVA: 100 (2020) ‚Üí 200 (2024) em 4 anos: CAGR = ${(cagr2 * 100).toFixed(2)}%`);
    console.log('  L√≥gica ANTIGA: Filtraria apenas anos positivos (100‚Üí120‚Üí200)');
    
    // Cen√°rio 3: Ambos negativos (melhoria)
    console.log('\nüîÑ Cen√°rio 3 - Redu√ß√£o de Preju√≠zo:');
    const cagr3 = calculateCAGRManual(-100, -50, 4);
    console.log(`  -100 ‚Üí -50 em 4 anos: CAGR = ${(cagr3 * 100).toFixed(2)}% (melhoria)`);
    
    // Cen√°rio 4: Preju√≠zo ‚Üí Lucro (recupera√ß√£o/turnaround) - NOVO!
    console.log('\nüöÄ Cen√°rio 4 - Recupera√ß√£o (Preju√≠zo ‚Üí Lucro):');
    const cagr4 = calculateCAGRManual(-100, 50, 4);
    console.log(`  -100 ‚Üí 50 em 4 anos: CAGR = ${(cagr4 * 100).toFixed(2)}% (recupera√ß√£o)`);
    console.log('  F√≥rmula: ((50 + 100) / 100)^(1/4) - 1 = Taxa de recupera√ß√£o anualizada');
    
    // Cen√°rio 5: Lucro ‚Üí Preju√≠zo (deteriora√ß√£o)
    console.log('\nüìâ Cen√°rio 5 - Deteriora√ß√£o (Lucro ‚Üí Preju√≠zo):');
    const cagr5 = calculateCAGRManual(100, -50, 4);
    console.log(`  100 ‚Üí -50 em 4 anos: CAGR = ${(cagr5 * 100).toFixed(2)}% (deteriora√ß√£o)`);
    console.log('  F√≥rmula: -((100 + 50) / 100)^(1/4) - 1 = Taxa de deteriora√ß√£o anualizada');
    
    // Cen√°rio 6: Recupera√ß√£o dram√°tica
    console.log('\nüéØ Cen√°rio 6 - Recupera√ß√£o Dram√°tica:');
    const cagr6 = calculateCAGRManual(-200, 300, 4);
    console.log(`  -200 ‚Üí 300 em 4 anos: CAGR = ${(cagr6 * 100).toFixed(2)}% (turnaround)`);
    
    console.log('\n‚úÖ Teste conclu√≠do!');
    console.log('\nüí° A nova l√≥gica completa cobre TODOS os cen√°rios poss√≠veis:');
    console.log('   ‚úÖ Lucro ‚Üí Lucro (CAGR tradicional)');
    console.log('   ‚úÖ Preju√≠zo ‚Üí Preju√≠zo (melhoria)');
    console.log('   ‚úÖ Preju√≠zo ‚Üí Lucro (recupera√ß√£o/turnaround)');
    console.log('   ‚úÖ Lucro ‚Üí Preju√≠zo (deteriora√ß√£o)');
    console.log('\nüéØ Agora capturamos hist√≥rias completas de recupera√ß√£o empresarial!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar teste
testCAGRCalculation();
