'use client'

import { createContext, useContext } from 'react'
import { useSessionRefresh } from '@/hooks/use-session-refresh'
import { toast } from 'sonner'

interface SessionRefreshContextType {
  startPaymentVerification: () => void
  refreshSession: () => Promise<any>
}

const SessionRefreshContext = createContext<SessionRefreshContextType | null>(null)

interface SessionRefreshProviderProps {
  children: React.ReactNode
}

export function SessionRefreshProvider({ children }: SessionRefreshProviderProps) {
  const { refreshSession, startPolling, stopPolling } = useSessionRefresh({
    checkOnMount: true, // Verificar automaticamente quando pÃ¡ginas sÃ£o acessadas
    enablePolling: false, // NÃ£o fazer polling por padrÃ£o
    interval: 3000, // Intervalo para polling (quando habilitado)
    onSessionUpdate: (newUser) => {
      // Mostrar toast quando o usuÃ¡rio se tornar Premium
      if (newUser.subscriptionTier === 'PREMIUM') {
        toast.success('ðŸŽ‰ ParabÃ©ns! Sua conta Premium foi ativada!', {
          description: 'Agora vocÃª tem acesso a todas as anÃ¡lises avanÃ§adas.',
          duration: 5000,
        })
      }
    }
  })

  // FunÃ§Ã£o para iniciar verificaÃ§Ã£o apÃ³s pagamento
  const startPaymentVerification = () => {
    console.log('Iniciando verificaÃ§Ã£o de pagamento...')
    
    // Fazer uma verificaÃ§Ã£o imediata
    refreshSession(true) // force = true
    
    // Iniciar polling temporÃ¡rio para capturar mudanÃ§as do webhook
    startPolling()
    
    // Parar verificaÃ§Ã£o apÃ³s 2 minutos (tempo suficiente para webhook processar)
    setTimeout(() => {
      console.log('Parando verificaÃ§Ã£o de pagamento apÃ³s timeout')
      stopPolling()
    }, 120000) // 2 minutos
  }

  // NÃ£o fazer verificaÃ§Ã£o automÃ¡tica no mount para evitar loops

  const contextValue: SessionRefreshContextType = {
    startPaymentVerification,
    refreshSession: refreshSession || (() => Promise.resolve(null)),
  }

  return (
    <SessionRefreshContext.Provider value={contextValue}>
      {children}
    </SessionRefreshContext.Provider>
  )
}

// Hook para usar as funÃ§Ãµes de refresh em qualquer componente
export function usePaymentVerification() {
  const context = useContext(SessionRefreshContext)
  
  if (!context) {
    // Fallback se o contexto nÃ£o estiver disponÃ­vel
    return {
      startVerification: () => {
        console.warn('SessionRefreshContext not available')
      },
      checkSession: async () => {
        console.warn('SessionRefreshContext not available')
        return null
      },
    }
  }

  const startVerification = () => {
    context.startPaymentVerification()
  }

  const checkSession = async () => {
    return await context.refreshSession()
  }

  return {
    startVerification,
    checkSession,
  }
}
