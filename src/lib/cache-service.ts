/**
 * SERVI√áO DE CACHE UNIFICADO
 * 
 * Encapsula√ß√£o robusta que usa Redis como cache prim√°rio
 * com fallback autom√°tico para cache em mem√≥ria.
 * 
 * Caracter√≠sticas:
 * - Redis como cache principal (distribu√≠do)
 * - Fallback autom√°tico para mem√≥ria se Redis falhar
 * - Interface unificada para todo o projeto
 * - Serializa√ß√£o autom√°tica de objetos
 * - TTL (Time To Live) configur√°vel
 * - Logs detalhados para debugging
 * - Reconex√£o autom√°tica do Redis
 * 
 * GEST√ÉO DE CONEX√ïES (melhorias v2 + Serverless):
 * - Singleton real: UMA √∫nica conex√£o Redis compartilhada POR INST√ÇNCIA
 * - Mutex de inicializa√ß√£o: evita race conditions
 * - Reutiliza√ß√£o de conex√£o: verifica antes de criar nova
 * - Cleanup adequado: libera recursos na desconex√£o
 * - Keep-alive: mant√©m conex√£o ativa com ping autom√°tico
 * 
 * OTIMIZA√á√ïES SERVERLESS (Vercel):
 * - Lazy loading: conecta apenas quando necess√°rio
 * - Idle disconnect: desconecta ap√≥s 30s de inatividade
 * - Reconex√£o autom√°tica: reconecta na pr√≥xima opera√ß√£o
 * - IMPORTANTE: Cada fun√ß√£o Lambda tem sua pr√≥pria inst√¢ncia/conex√£o
 *   (isso √© normal e esperado em ambientes serverless)
 * 
 * FAIL-FAST PATTERN (preven√ß√£o de degrada√ß√£o):
 * - Detecta erros cr√≠ticos do Redis (max clients, connection refused, etc)
 * - Desabilita Redis automaticamente nesta inst√¢ncia quando erro cr√≠tico ocorre
 * - Aplica√ß√£o continua funcionando normalmente com cache em mem√≥ria
 * - Evita tentativas repetidas que causariam timeout e degrada√ß√£o
 * - Cada nova inst√¢ncia Lambda tenta conectar normalmente (stateless)
 */

// Importa√ß√£o condicional do Redis apenas no servidor
let createClient: any = null
let RedisClientType: any = null

// S√≥ importa Redis se estivermos no servidor
if (typeof window === 'undefined') {
  try {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const redisModule = require('redis')
    createClient = redisModule.createClient
    RedisClientType = redisModule.RedisClientType
  } catch (error: any) {
    console.warn('Redis n√£o dispon√≠vel, usando apenas cache em mem√≥ria')
  }
}

// Fun√ß√£o auxiliar para serializar valores com BigInt
function serializeValue(value: any): string {
  return JSON.stringify(value, (_, v) => 
    typeof v === 'bigint' ? v.toString() : v
  )
}

// Tipos para o cache
export interface CacheOptions {
  ttl?: number // Time to live em segundos
  prefix?: string // Prefixo para as chaves
}

export interface CacheItem<T = any> {
  data: T
  timestamp: number
  ttl?: number
}

// Cliente Redis (GLOBAL √öNICO)
let redisClient: any | null = null
let redisConnected = false
let reconnectAttempts = 0
const MAX_RECONNECT_ATTEMPTS = 5

// Controle de inicializa√ß√£o (evita m√∫ltiplas conex√µes)
let initializationPromise: Promise<void> | null = null
let isInitializing = false

// Controle de atividade (para desconex√£o autom√°tica em serverless)
let lastActivity = Date.now()
let idleCheckInterval: NodeJS.Timeout | null = null

// ‚ö° FAIL-FAST: Evita degrada√ß√£o quando Redis est√° indispon√≠vel (otimizado para serverless)
let redisDisabled = false // true = Redis desabilitado nesta inst√¢ncia (max clients ou erro cr√≠tico)
let lastCriticalError: string | null = null // √öltimo erro cr√≠tico
const CRITICAL_ERRORS = ['max number of clients', 'maxclients', 'too many clients', 'econnrefused', 'connection refused']

// Cache em mem√≥ria como fallback
const memoryCache = new Map<string, CacheItem>()

// Configura√ß√µes
const DEFAULT_TTL = 3600 // 1 hora em segundos
const MEMORY_CLEANUP_INTERVAL = 5 * 60 * 1000 // 5 minutos
const REDIS_RECONNECT_DELAY = 5000 // 5 segundos
const REDIS_IDLE_TIMEOUT = 10000 // 10 segundos de inatividade antes de desconectar (agressivo para serverless)
const LAZY_CONNECT = true // Conecta apenas quando necess√°rio (otimiza√ß√£o serverless)
const CONNECTION_TIMEOUT = 3000 // 3 segundos timeout para conectar (fail-fast)
const COMMAND_TIMEOUT = 2000 // 2 segundos timeout para comandos (fail-fast)
const DISCONNECT_AFTER_OPERATION = process.env.REDIS_DISCONNECT_AFTER_OP === 'true' // Desconectar ap√≥s cada opera√ß√£o (modo ultra-agressivo)

/**
 * Fun√ß√µes auxiliares de Fail-Fast (otimizado para serverless)
 */
function isCriticalError(error: any): boolean {
  const errorMsg = error?.message?.toLowerCase() || ''
  const errorCode = error?.code?.toLowerCase() || ''
  
  return CRITICAL_ERRORS.some(criticalErr => 
    errorMsg.includes(criticalErr) || errorCode.includes(criticalErr)
  )
}

function handleRedisError(error: any): void {
  // Se for erro cr√≠tico (max clients, connection refused, etc), desabilita Redis nesta inst√¢ncia
  if (isCriticalError(error)) {
    const errorMsg = error?.message || 'Unknown error'
    console.error(`üö® Redis: ERRO CR√çTICO (${errorMsg}) - Redis DESABILITADO nesta inst√¢ncia`)
    console.log('üìù Aplica√ß√£o continuar√° usando cache em mem√≥ria como fallback')
    
    redisDisabled = true
    lastCriticalError = errorMsg
    redisConnected = false
    
    // Desconectar e limpar cliente para liberar recursos
    if (redisClient) {
      redisClient.disconnect().catch(() => {})
      redisClient = null
    }
  } else {
    // Erros n√£o cr√≠ticos apenas logam
    console.warn(`‚ö†Ô∏è Redis: Erro n√£o cr√≠tico, tentar√° novamente na pr√≥xima opera√ß√£o:`, error?.message)
  }
}

function shouldUseRedis(): boolean {
  // Se Redis foi desabilitado devido a erro cr√≠tico, n√£o usar
  if (redisDisabled) {
    return false
  }
  
  // Caso contr√°rio, usar se estiver conectado
  return redisConnected && redisClient !== null
}

/**
 * Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo para minimizar conex√µes)
 * S√≥ executa se a vari√°vel de ambiente REDIS_DISCONNECT_AFTER_OP=true
 */
async function disconnectAfterOperation(): Promise<void> {
  if (DISCONNECT_AFTER_OPERATION && redisClient && redisConnected) {
    try {
      await redisClient.disconnect()
      redisConnected = false
      console.log('üîå Redis: Desconectado ap√≥s opera√ß√£o (modo ultra-agressivo)')
    } catch (error) {
      // Ignora erros ao desconectar
    }
  }
}

/**
 * Classe principal do servi√ßo de cache
 */
export class CacheService {
  private static instance: CacheService
  private initialized = false

  private constructor() {}

  /**
   * Singleton pattern
   */
  static getInstance(): CacheService {
    if (!CacheService.instance) {
      CacheService.instance = new CacheService()
    }
    return CacheService.instance
  }

  /**
   * Inicializar o servi√ßo de cache
   * Usa mutex para evitar m√∫ltiplas inicializa√ß√µes simult√¢neas
   */
  async initialize(): Promise<void> {
    // Se j√° inicializado, retorna imediatamente
    if (this.initialized) return

    // Se j√° est√° inicializando, aguarda a inicializa√ß√£o em progresso
    if (isInitializing && initializationPromise) {
      console.log('‚è≥ CacheService j√° est√° sendo inicializado, aguardando...')
      return initializationPromise
    }

    // Marca como inicializando e cria a promise
    isInitializing = true
    initializationPromise = this._doInitialize()

    try {
      await initializationPromise
    } finally {
      isInitializing = false
      initializationPromise = null
    }
  }

  /**
   * Realiza a inicializa√ß√£o efetiva (m√©todo privado)
   */
  private async _doInitialize(): Promise<void> {
    console.log('üöÄ Inicializando CacheService...')

    // Em modo lazy, n√£o conecta ao Redis imediatamente
    if (!LAZY_CONNECT) {
      await this.initializeRedis()
    }

    // Configurar limpeza autom√°tica do cache em mem√≥ria (apenas uma vez)
    if (!this.initialized) {
      this.setupMemoryCleanup()
      
      // Configurar monitoramento de inatividade (serverless)
      this.setupIdleDisconnect()
    }

    this.initialized = true
    console.log('‚úÖ CacheService inicializado com sucesso' + (LAZY_CONNECT ? ' (lazy mode)' : ''))
  }

  /**
   * Configurar desconex√£o autom√°tica por inatividade (otimiza√ß√£o serverless)
   */
  private setupIdleDisconnect(): void {
    // Apenas em ambientes serverless (Vercel)
    if (process.env.VERCEL || process.env.AWS_LAMBDA_FUNCTION_NAME) {
      idleCheckInterval = setInterval(() => {
        const idleTime = Date.now() - lastActivity
        
        if (idleTime > REDIS_IDLE_TIMEOUT && redisClient && redisConnected) {
          console.log(`‚è∞ Redis ocioso por ${Math.round(idleTime / 1000)}s, desconectando para liberar conex√£o...`)
          this.disconnectRedis().catch(err => 
            console.warn('Erro ao desconectar Redis ocioso:', err)
          )
        }
      }, Math.min(REDIS_IDLE_TIMEOUT / 2, 5000)) // Verifica com mais frequ√™ncia (m√°x 5s)
      
      console.log(`‚è∞ Monitoramento agressivo de inatividade configurado (${REDIS_IDLE_TIMEOUT / 1000}s)`)
    }
  }

  /**
   * Inicializar conex√£o Redis
   */
  private async initializeRedis(): Promise<void> {
    // Verificar se estamos no servidor e se Redis est√° dispon√≠vel
    if (typeof window !== 'undefined' || !createClient) {
      console.log('üîÑ Redis n√£o dispon√≠vel, usando apenas cache em mem√≥ria')
      return
    }

    // Se j√° existe uma conex√£o ativa, reutiliza
    if (redisClient && redisConnected) {
      console.log('‚ôªÔ∏è Redis j√° conectado, reutilizando conex√£o existente')
      return
    }

    // Se j√° existe um cliente mas n√£o est√° conectado, tenta reconectar
    if (redisClient && !redisConnected) {
      try {
        console.log('üîÑ Tentando reconectar cliente Redis existente...')
        await redisClient.connect()
        console.log('‚úÖ Redis reconectado com sucesso')
        return
      } catch (error) {
        console.warn('‚ö†Ô∏è Falha ao reconectar, criando nova conex√£o:', error)
        // Limpa o cliente anterior antes de criar novo
        try {
          await redisClient.disconnect()
        } catch (e) {
          // Ignora erros ao desconectar
        }
        redisClient = null
      }
    }

    const redisUrl = process.env.REDIS_URL

    if (!redisUrl) {
      console.warn('‚ö†Ô∏è REDIS_URL n√£o configurada, usando apenas cache em mem√≥ria')
      return
    }

    try {
      console.log('üîó Criando nova conex√£o Redis...')
      
      redisClient = createClient({
        url: redisUrl,
        socket: {
          connectTimeout: CONNECTION_TIMEOUT, // 3s timeout (fail-fast)
          commandTimeout: COMMAND_TIMEOUT, // 2s timeout para comandos
          reconnectStrategy: (retries: number) => {
            // Em serverless, n√£o tentar reconectar automaticamente
            // (deixa a pr√≥xima Lambda tentar)
            console.warn(`‚ùå Redis: Falha na conex√£o (tentativa ${retries}), desabilitando reconex√£o autom√°tica`)
            return false // N√£o reconectar
          },
          // Otimiza√ß√µes para reduzir uso de conex√µes
          keepAlive: 0, // Desabilitar TCP keep-alive (reduz overhead)
          noDelay: true // Desabilitar algoritmo de Nagle (menor lat√™ncia, menos buffers)
        },
        // IMPORTANTE: Desabilitar ping/keep-alive para n√£o manter conex√£o aberta
        // Em serverless, queremos desconectar rapidamente quando ocioso
        // pingInterval n√£o √© definido (desabilitado)
      })

      // Event listeners
      redisClient.on('connect', () => {
        console.log('üîó Redis: Conectando...')
      })

      redisClient.on('ready', () => {
        console.log('‚úÖ Redis: Pronto para uso')
        redisConnected = true
        reconnectAttempts = 0
      })

      redisClient.on('error', (error: any) => {
        console.error('‚ùå Redis: Erro de conex√£o:', error.message)
        redisConnected = false
        handleRedisError(error)
      })

      redisClient.on('end', () => {
        console.log('üîå Redis: Conex√£o encerrada')
        redisConnected = false
      })

      redisClient.on('reconnecting', () => {
        console.log('üîÑ Redis: Reconectando...')
        reconnectAttempts++
      })

      // Conectar
      await redisClient.connect()

    } catch (error) {
      console.error('‚ùå Erro ao conectar ao Redis:', error)
      redisClient = null
      redisConnected = false
    }
  }

  /**
   * Configurar limpeza autom√°tica do cache em mem√≥ria
   */
  private setupMemoryCleanup(): void {
    setInterval(() => {
      this.cleanupMemoryCache()
    }, MEMORY_CLEANUP_INTERVAL)

    console.log(`üßπ Limpeza autom√°tica do cache em mem√≥ria configurada (${MEMORY_CLEANUP_INTERVAL / 1000}s)`)
  }

  /**
   * Limpar itens expirados do cache em mem√≥ria
   */
  private cleanupMemoryCache(): void {
    const now = Date.now()
    let cleaned = 0

    for (const [key, item] of memoryCache.entries()) {
      if (item.ttl && (now - item.timestamp) > (item.ttl * 1000)) {
        memoryCache.delete(key)
        cleaned++
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ Cache em mem√≥ria: ${cleaned} itens expirados removidos`)
    }
  }

  /**
   * Garantir que Redis est√° conectado (lazy loading)
   */
  private async ensureRedisConnection(): Promise<void> {
    if (LAZY_CONNECT && !redisConnected && !isInitializing) {
      await this.initializeRedis()
    }
    // Atualizar timestamp de atividade
    lastActivity = Date.now()
  }

  /**
   * Obter valor do cache
   */
  async get<T = any>(key: string, options: CacheOptions = {}): Promise<T | null> {
    const fullKey = this.buildKey(key, options.prefix)

    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis()) {
        // Garantir conex√£o (lazy loading)
        await this.ensureRedisConnection()
        
        // Tentar Redis primeiro
        if (redisConnected && redisClient) {
          const value = await redisClient.get(fullKey)
          
          // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
          await disconnectAfterOperation()
          
          if (value !== null) {
            const parsed = JSON.parse(value)
            console.log(`üì¶ Cache HIT (Redis): ${fullKey}`)
            return parsed
          }
        }
      } else if (redisDisabled) {
        // Redis desabilitado, usando apenas mem√≥ria (silencioso para n√£o poluir logs)
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao buscar no Redis (${fullKey}):`, error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
    }

    // Fallback para mem√≥ria
    const memoryItem = memoryCache.get(fullKey)
    if (memoryItem) {
      // Verificar se n√£o expirou
      if (!memoryItem.ttl || (Date.now() - memoryItem.timestamp) < (memoryItem.ttl * 1000)) {
        console.log(`üì¶ Cache HIT (Memory): ${fullKey}`)
        return memoryItem.data
      } else {
        // Remover item expirado
        memoryCache.delete(fullKey)
      }
    }

    console.log(`üì¶ Cache MISS: ${fullKey}`)
    return null
  }

  /**
   * Armazenar valor no cache
   */
  async set<T = any>(key: string, value: T, options: CacheOptions = {}): Promise<void> {
    const fullKey = this.buildKey(key, options.prefix)
    const ttl = options.ttl || DEFAULT_TTL
    const serialized = serializeValue(value)

    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis()) {
        // Garantir conex√£o (lazy loading)
        await this.ensureRedisConnection()
        
        // Tentar Redis primeiro
        if (redisConnected && redisClient) {
          await redisClient.setEx(fullKey, ttl, serialized)
          console.log(`üíæ Cache SET (Redis): ${fullKey} (TTL: ${ttl}s)`)
          
          // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
          await disconnectAfterOperation()
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao salvar no Redis (${fullKey}):`, error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
    }

    // Sempre salvar na mem√≥ria tamb√©m (fallback)
    memoryCache.set(fullKey, {
      data: value,
      timestamp: Date.now(),
      ttl
    })
    console.log(`üíæ Cache SET (Memory): ${fullKey} (TTL: ${ttl}s)`)
  }

  /**
   * Remover valor do cache
   */
  async delete(key: string, options: CacheOptions = {}): Promise<void> {
    const fullKey = this.buildKey(key, options.prefix)

    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis()) {
        // Remover do Redis
        if (redisConnected && redisClient) {
          await redisClient.del(fullKey)
          console.log(`üóëÔ∏è Cache DELETE (Redis): ${fullKey}`)
          
          // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
          await disconnectAfterOperation()
        }
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao deletar do Redis (${fullKey}):`, error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
    }

    // Remover da mem√≥ria
    memoryCache.delete(fullKey)
    console.log(`üóëÔ∏è Cache DELETE (Memory): ${fullKey}`)
  }

  /**
   * Limpar todo o cache
   */
  async clear(prefix?: string): Promise<void> {
    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis()) {
        // Limpar Redis
        if (redisConnected && redisClient) {
          if (prefix) {
            const pattern = this.buildKey('*', prefix)
            const keys = await redisClient.keys(pattern)
            if (keys.length > 0) {
              await redisClient.del(keys)
              console.log(`üßπ Cache CLEAR (Redis): ${keys.length} chaves com prefixo "${prefix}"`)
            }
          } else {
            await redisClient.flushDb()
            console.log('üßπ Cache CLEAR (Redis): Todos os dados')
          }
          
          // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
          await disconnectAfterOperation()
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar Redis:', error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
    }

    // Limpar mem√≥ria
    if (prefix) {
      const prefixPattern = this.buildKey('', prefix)
      for (const key of memoryCache.keys()) {
        if (key.startsWith(prefixPattern)) {
          memoryCache.delete(key)
        }
      }
      console.log(`üßπ Cache CLEAR (Memory): Chaves com prefixo "${prefix}"`)
    } else {
      memoryCache.clear()
      console.log('üßπ Cache CLEAR (Memory): Todos os dados')
    }
  }

  /**
   * Buscar chaves por padr√£o (Redis KEYS command)
   */
  async getKeysByPattern(pattern: string): Promise<string[]> {
    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis() && redisConnected && redisClient) {
        const keys = await redisClient.keys(pattern)
        
        // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
        await disconnectAfterOperation()
        
        return keys
      }
      
      // Fallback para mem√≥ria
      const keys: string[] = []
      const regex = new RegExp(pattern.replace(/\*/g, '.*'))
      
      for (const key of memoryCache.keys()) {
        if (regex.test(key)) {
          keys.push(key)
        }
      }
      
      return keys
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao buscar chaves por padr√£o ${pattern}:`, error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
      
      // Fallback para mem√≥ria em caso de erro
      const keys: string[] = []
      const regex = new RegExp(pattern.replace(/\*/g, '.*'))
      
      for (const key of memoryCache.keys()) {
        if (regex.test(key)) {
          keys.push(key)
        }
      }
      
      return keys
    }
  }

  /**
   * Deletar m√∫ltiplas chaves
   */
  async deleteKeys(keys: string[]): Promise<number> {
    if (keys.length === 0) return 0
    
    let deleted = 0
    
    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis()) {
        // Deletar do Redis
        if (redisConnected && redisClient && keys.length > 0) {
          deleted += await redisClient.del(keys)
          
          // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
          await disconnectAfterOperation()
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao deletar chaves do Redis:', error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
    }
    
    // Deletar da mem√≥ria
    for (const key of keys) {
      if (memoryCache.has(key)) {
        memoryCache.delete(key)
        deleted++
      }
    }
    
    return deleted
  }

  /**
   * Limpar cache por padr√£o wildcard
   */
  async clearByPattern(pattern: string): Promise<number> {
    try {
      const keys = await this.getKeysByPattern(pattern)
      if (keys.length > 0) {
        const deleted = await this.deleteKeys(keys)
        console.log(`üßπ Cache CLEAR (Pattern): ${deleted} chaves com padr√£o "${pattern}"`)
        return deleted
      }
      return 0
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro ao limpar por padr√£o ${pattern}:`, error)
      return 0
    }
  }

  /**
   * Verificar se Redis est√° conectado
   */
  isRedisConnected(): boolean {
    return redisConnected
  }

  /**
   * Obter informa√ß√µes detalhadas sobre a conex√£o Redis
   */
  getConnectionInfo(): {
    connected: boolean
    clientExists: boolean
    reconnectAttempts: number
    initialized: boolean
    idleTime: number
    lazyMode: boolean
    isServerless: boolean
    redisDisabled: boolean
    lastCriticalError: string | null
  } {
    return {
      connected: redisConnected,
      clientExists: redisClient !== null,
      reconnectAttempts,
      initialized: this.initialized,
      idleTime: Math.round((Date.now() - lastActivity) / 1000), // em segundos
      lazyMode: LAZY_CONNECT,
      isServerless: !!(process.env.VERCEL || process.env.AWS_LAMBDA_FUNCTION_NAME),
      redisDisabled: redisDisabled,
      lastCriticalError: lastCriticalError
    }
  }

  /**
   * Obter estat√≠sticas do cache
   */
  async getStats(): Promise<{
    redis: { connected: boolean; keys?: number; disabled?: boolean }
    memory: { keys: number; size: string }
  }> {
    const stats = {
      redis: { 
        connected: redisConnected,
        disabled: redisDisabled
      } as any,
      memory: {
        keys: memoryCache.size,
        size: this.getMemoryCacheSize()
      }
    }

    try {
      // ‚ö° FAIL-FAST: Verificar se deve usar Redis
      if (shouldUseRedis() && redisConnected && redisClient) {
        const info = await redisClient.info('keyspace')
        const dbKeys = info.match(/keys=(\d+)/)
        stats.redis.keys = dbKeys ? parseInt(dbKeys[1]) : 0
        
        // Desconectar ap√≥s opera√ß√£o (modo ultra-agressivo)
        await disconnectAfterOperation()
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao obter stats do Redis:', error)
      handleRedisError(error)
      await disconnectAfterOperation() // Desconectar mesmo em caso de erro
    }

    return stats
  }

  /**
   * Construir chave completa com prefixo
   */
  private buildKey(key: string, prefix?: string): string {
    const parts = ['analisador-acoes'] // Prefixo global do projeto
    
    if (prefix) {
      parts.push(prefix)
    }
    
    if (key) {
      parts.push(key)
    }

    return parts.join(':')
  }

  /**
   * Calcular tamanho aproximado do cache em mem√≥ria
   */
  private getMemoryCacheSize(): string {
    let size = 0
    for (const [key, value] of memoryCache.entries()) {
      size += key.length * 2 // Aproxima√ß√£o para string UTF-16
      size += serializeValue(value).length * 2
    }
    
    if (size < 1024) return `${size} B`
    if (size < 1024 * 1024) return `${(size / 1024).toFixed(1)} KB`
    return `${(size / (1024 * 1024)).toFixed(1)} MB`
  }

  /**
   * Desconectar apenas o Redis (mant√©m servi√ßo ativo para reconex√£o)
   */
  private async disconnectRedis(): Promise<void> {
    try {
      if (redisClient && redisConnected) {
        await redisClient.disconnect()
        redisConnected = false
        console.log('üîå Redis: Desconectado (idle)')
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao desconectar Redis:', error)
      redisConnected = false
    }
  }

  /**
   * Fechar conex√µes e limpar tudo
   */
  async disconnect(): Promise<void> {
    // Limpar interval de idle check
    if (idleCheckInterval) {
      clearInterval(idleCheckInterval)
      idleCheckInterval = null
    }

    try {
      if (redisClient) {
        await redisClient.disconnect()
        redisClient = null
        redisConnected = false
        console.log('üîå Redis: Desconectado e cliente limpo')
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao desconectar Redis:', error)
      // For√ßa limpeza mesmo com erro
      redisClient = null
      redisConnected = false
    }

    memoryCache.clear()
    this.initialized = false
    console.log('üßπ Cache em mem√≥ria limpo e servi√ßo resetado')
  }
}

// Inst√¢ncia singleton
export const cacheService = CacheService.getInstance()

// Inicializar automaticamente se n√£o estiver no browser
if (typeof window === 'undefined') {
  cacheService.initialize().catch(error => {
    console.error('‚ùå Erro ao inicializar CacheService:', error)
  })
}

// Fun√ß√µes de conveni√™ncia para uso direto
export const cache = {
  /**
   * Obter valor do cache
   */
  get: <T = any>(key: string, options?: CacheOptions) => 
    cacheService.get<T>(key, options),

  /**
   * Armazenar valor no cache
   */
  set: <T = any>(key: string, value: T, options?: CacheOptions) => 
    cacheService.set(key, value, options),

  /**
   * Remover valor do cache
   */
  delete: (key: string, options?: CacheOptions) => 
    cacheService.delete(key, options),

  /**
   * Limpar cache
   */
  clear: (prefix?: string) => 
    cacheService.clear(prefix),

  /**
   * Obter estat√≠sticas
   */
  stats: () => 
    cacheService.getStats(),

  /**
   * Wrapper para cache com fun√ß√£o
   * Executa a fun√ß√£o apenas se n√£o houver cache
   */
  wrap: async <T = any>(
    key: string, 
    fn: () => Promise<T> | T, 
    options?: CacheOptions
  ): Promise<T> => {
    // Tentar obter do cache primeiro
    const cached = await cacheService.get<T>(key, options)
    if (cached !== null) {
      return cached
    }

    // Executar fun√ß√£o e cachear resultado
    const result = await fn()
    await cacheService.set(key, result, options)
    return result
  },

  /**
   * Buscar chaves por padr√£o
   */
  getKeysByPattern: (pattern: string) => 
    cacheService.getKeysByPattern(pattern),

  /**
   * Deletar m√∫ltiplas chaves
   */
  deleteKeys: (keys: string[]) => 
    cacheService.deleteKeys(keys),

  /**
   * Limpar cache por padr√£o
   */
  clearByPattern: (pattern: string) => 
    cacheService.clearByPattern(pattern),

  /**
   * Verificar se Redis est√° conectado
   */
  isRedisConnected: () => 
    cacheService.isRedisConnected(),

  /**
   * Obter informa√ß√µes detalhadas da conex√£o
   */
  getConnectionInfo: () => 
    cacheService.getConnectionInfo()
}

// Cleanup na sa√≠da do processo
if (typeof window === 'undefined') {
  process.on('SIGINT', async () => {
    console.log('üõë Encerrando CacheService...')
    await cacheService.disconnect()
    process.exit(0)
  })

  process.on('SIGTERM', async () => {
    console.log('üõë Encerrando CacheService...')
    await cacheService.disconnect()
    process.exit(0)
  })
}
