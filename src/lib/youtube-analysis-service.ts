import { prisma } from '@/lib/prisma';
import { safeWrite, safeQueryWithParams } from '@/lib/prisma-wrapper';
import { GoogleGenAI } from '@google/genai';

/**
 * Servi√ßo de An√°lise de V√≠deos do YouTube
 * 
 * Busca v√≠deos mais recentes de empresas no YouTube e analisa o conte√∫do
 * usando Gemini AI com Google Search capability.
 */

export interface YouTubeVideoSearchResult {
  videoIds: string[];
  reason?: string;
}

export interface YouTubeAnalysisResult {
  score: number; // 0-100
  summary: string;
  positivePoints: string[];
  negativePoints: string[];
}

export interface WebContentAnalysisResult {
  score: number; // 0-100
  summary: string;
  positivePoints: string[];
  negativePoints: string[];
  sources: string[]; // URLs das fontes utilizadas
}

export interface SavedYouTubeAnalysis {
  id: string;
  companyId: number;
  score: number;
  summary: string;
  positivePoints: string[] | null;
  negativePoints: string[] | null;
  videoIds: string[];
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export class YouTubeAnalysisService {
  /**
   * Busca IDs dos v√≠deos mais recentes sobre uma empresa no YouTube
   * Usa a API interna do YouTube diretamente
   */
  static async searchYouTubeVideos(
    ticker: string,
    companyName: string,
    sector?: string | null,
    industry?: string | null
  ): Promise<string[]> {
    try {
      console.log(`üîç Buscando v√≠deos do YouTube para ${ticker} via API...`);
      
      // Construir query de busca
      const searchQuery = ticker;
      
      // Chamar API do YouTube
      const response = await fetch(
        `https://www.youtube.com/youtubei/v1/search?prettyPrint=false`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          },
          body: JSON.stringify({
            context: {
              client: {
                clientName: 'WEB',
                clientVersion: '2.20241210.01.00',
                hl: 'pt',
                gl: 'BR',
              },
            },
            query: searchQuery,
          }),
        }
      );
      
      if (!response.ok) {
        throw new Error(`YouTube API error: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      
      // Extrair IDs dos v√≠deos da resposta
      const videoIds = this.extractVideoIds(data, ticker, companyName);
      
      if (videoIds.length === 0) {
        console.log(`‚ö†Ô∏è ${ticker}: Nenhum v√≠deo encontrado que atenda aos crit√©rios`);
      } else {
        console.log(`‚úÖ ${videoIds.length} v√≠deo(s) encontrado(s) para ${ticker}`);
      }
      
      return videoIds.slice(0, 2); // Max 2 videos
    } catch (error) {
      console.error(`‚ùå Erro ao buscar v√≠deos para ${ticker}:`, error);
      throw error;
    }
  }

  /**
   * Converte o texto de publica√ß√£o (ex: "h√° 1 hora", "h√° 3 dias") em n√∫mero de dias
   */
  private static parsePublishedTime(publishedTimeText: string): number {
    if (!publishedTimeText) return 999999; // Se n√£o tiver data, considerar muito antigo
    
    const text = publishedTimeText.toLowerCase();
    
    // Extrair n√∫mero e unidade
    const match = text.match(/(\d+)\s*(hora|dia|semana|m√™s|meses|ano)/);
    if (!match) return 999999;
    
    const value = parseInt(match[1]);
    const unit = match[2];
    
    // Converter para dias
    switch (unit) {
      case 'hora':
        return value / 24;
      case 'dia':
        return value;
      case 'semana':
        return value * 7;
      case 'm√™s':
      case 'meses':
        return value * 30;
      case 'ano':
        return value * 365;
      default:
        return 999999;
    }
  }

  /**
   * Extrai IDs de v√≠deos da resposta da API do YouTube
   * PRIORIZA v√≠deos mais recentes (m√°ximo 6 meses)
   */
  private static extractVideoIds(data: any, ticker: string, companyName: string): string[] {
    const MAX_AGE_DAYS = 180; // 6 meses
    const candidateVideos: { videoId: string; ageDays: number; title: string; channel: string }[] = [];
    
    try {
      const contents = data?.contents?.twoColumnSearchResultsRenderer?.primaryContents?.sectionListRenderer?.contents;
      
      if (!contents || !Array.isArray(contents)) {
        console.log(`‚ö†Ô∏è Estrutura de resposta inesperada do YouTube`);
        return [];
      }
      
      for (const section of contents) {
        const items = section?.itemSectionRenderer?.contents;
        if (!items || !Array.isArray(items)) continue;
        
        for (const item of items) {
          // Verificar se √© um v√≠deo (n√£o an√∫ncio, n√£o playlist, etc.)
          if (item.videoRenderer) {
            const videoId = item.videoRenderer.videoId;
            const title = item.videoRenderer.title?.runs?.[0]?.text || '';
            const channel = item.videoRenderer.longBylineText?.runs?.[0]?.text || '';
            const lengthText = item.videoRenderer.lengthText?.simpleText || '';
            const publishedTimeText = item.videoRenderer.publishedTimeText?.simpleText || '';
            
            // Calcular idade do v√≠deo em dias
            const ageDays = this.parsePublishedTime(publishedTimeText);
            
            console.log(`üé• Avaliando: ${title} (${channel}) - ${lengthText} - ${publishedTimeText} (${ageDays.toFixed(1)} dias)`);
            
            // Filtro de idade: rejeitar v√≠deos muito antigos (> 6 meses)
            if (ageDays > MAX_AGE_DAYS) {
              console.log(`   ‚è≥ V√≠deo muito antigo (${ageDays.toFixed(0)} dias > ${MAX_AGE_DAYS} dias)`);
              continue;
            }
            
            // Aplicar outros filtros
            if (this.isValidVideo(videoId, title, channel, lengthText, ticker, companyName)) {
              console.log(`   ‚úÖ V√≠deo aprovado - adicionando aos candidatos`);
              candidateVideos.push({ videoId, ageDays, title, channel });
            } else {
              console.log(`   ‚ùå V√≠deo rejeitado pelos filtros`);
            }
          }
        }
      }
      
      // Ordenar por idade (mais recentes primeiro)
      candidateVideos.sort((a, b) => a.ageDays - b.ageDays);
      
      // Log dos v√≠deos selecionados
      console.log(`\nüìä V√≠deos candidatos ordenados por rec√™ncia:`);
      candidateVideos.slice(0, 2).forEach((video, index) => {
        console.log(`   ${index + 1}. ${video.title} (${video.channel}) - ${video.ageDays.toFixed(1)} dias atr√°s`);
      });
      
      // Retornar os 2 v√≠deos mais recentes
      return candidateVideos.slice(0, 2).map(v => v.videoId);
      
    } catch (error) {
      console.error(`‚ùå Erro ao extrair IDs de v√≠deos:`, error);
    }
    
    return [];
  }

  /**
   * Valida se um v√≠deo atende aos crit√©rios
   */
  private static isValidVideo(
    videoId: string,
    title: string,
    channel: string,
    lengthText: string,
    ticker: string,
    companyName: string
  ): boolean {
    // Verificar se videoId existe
    if (!videoId) {
      console.log(`      ‚ùå Sem videoId`);
      return false;
    }
    
    // Verificar dura√ß√£o (< 30 minutos)
    if (!this.isDurationValid(lengthText)) {
      console.log(`      ‚ùå Dura√ß√£o inv√°lida: ${lengthText}`);
      return false;
    }
    
    // Verificar se t√≠tulo √© relevante
    if (!this.isTitleRelevant(title, ticker, companyName)) {
      console.log(`      ‚ùå T√≠tulo n√£o relevante`);
      return false;
    }
    
    // Verificar se canal √© reconhecido
    if (!this.isChannelRecognized(channel)) {
      console.log(`      ‚ùå Canal n√£o reconhecido: ${channel}`);
      return false;
    }
    
    return true;
  }

  /**
   * Valida dura√ß√£o do v√≠deo (deve ser < 30 minutos)
   */
  private static isDurationValid(lengthText: string): boolean {
    if (!lengthText) return false;
    
    // Parse duration like "2:28", "15:43", "1:02:30"
    const parts = lengthText.split(':').map(p => parseInt(p, 10));
    
    if (parts.length === 2) {
      // MM:SS format
      const minutes = parts[0];
      return minutes < 30;
    } else if (parts.length === 3) {
      // HH:MM:SS format
      const hours = parts[0];
      const minutes = parts[1];
      const totalMinutes = hours * 60 + minutes;
      return totalMinutes < 30;
    }
    
    return false;
  }

  /**
   * Verifica se o t√≠tulo √© relevante para a empresa
   */
  private static isTitleRelevant(title: string, ticker: string, companyName: string): boolean {
    const titleLower = title.toLowerCase();
    const tickerLower = ticker.toLowerCase();
    
    // Verificar se ticker est√° no t√≠tulo
    return titleLower.includes(tickerLower);
  }

  /**
   * Verifica se o canal √© reconhecido/confi√°vel
   */
  private static isChannelRecognized(channel: string): boolean {
    const recognizedChannels = [
      'clube do valor',
      'nord research',
      'suno research',
      'infomoney',
      'investidor sardinha',
      'me poupe',
      'o primo rico',
      'investidor raiz',
      'economista sincero',
      'eqi investimentos',
      'xp investimentos',
      'mirai investing',
      'neto invest',
      'hamu invest',
      'valueinvesting',
      'investimento em a√ß√£o',
      'thiago nigro',
      'favelado investidor',
      'raul sena',
      'bruno perini',
      'cruno chimarelli',
      'tiago reis',
      'ativo virtual',
      'kako invest',
      'investindo com estrat√©gia',
      'dividendos em foco',
      'dividendos em a√ß√£o',
      'engenheiro e investidor',
      'felipe eduardo',
      'm√©todo de investimento',
      'market makers',
      'clube dos dividendos'
    ];
    
    const channelLower = channel.toLowerCase();
    
    return recognizedChannels.some(recognized => 
      channelLower.includes(recognized) || recognized.includes(channelLower)
    );
  }

  /**
   * Analisa os v√≠deos do YouTube e extrai insights
   */
  static async analyzeVideos(
    videoIds: string[],
    ticker: string,
    companyName: string
  ): Promise<YouTubeAnalysisResult> {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY n√£o configurada');
    }

    if (!videoIds || videoIds.length === 0) {
      throw new Error('Nenhum v√≠deo para analisar');
    }

    try {
      const ai = new GoogleGenAI({
        apiKey: process.env.GEMINI_API_KEY,
      });

      const prompt = `Voc√™ √© um analista fundamentalista especializado em a√ß√µes brasileiras.

Data Atual: ${new Date().toLocaleDateString()}

Assista ao(s) v√≠deo(s) fornecido(s) sobre a empresa ${companyName} (${ticker}) e realize uma an√°lise fundamentalista do conte√∫do.

**IMPORTANTE SOBRE OS V√çDEOS:**
- Voc√™ receber√° de 1 a 2 v√≠deos curtos (m√°ximo 30 minutos cada)
- S√£o v√≠deos de canais especializados e confi√°veis
- Foque nas informa√ß√µes fundamentalistas apresentadas
- Voc√™ deve avaliar se for fazer cita√ß√£o da datas no resumo, pontos positivos e/ou negativos, avalie se eles ainda s√£o relevantes para a data atual (Ex: dividendos que ja foram pagos n√£o s√£o mais pontos positivos)
- Voc√™ deve garantir que sua resposta esteja em Portugu√™s Brasileiro

**‚ö†Ô∏è CR√çTICO - FOCO EXCLUSIVO NA EMPRESA:**
- Extraia informa√ß√µes APENAS sobre ${companyName} (${ticker})
- Se o v√≠deo mencionar m√∫ltiplas empresas (ex: carteiras, compara√ß√µes, rankings), IGNORE informa√ß√µes de outras empresas
- N√ÉO inclua dados, m√©tricas ou an√°lises de PETR3, PETR4, VALE3, ITUB4, BBDC4, CXSE3 ou QUALQUER outro ticker que N√ÉO seja ${ticker}
- Se o v√≠deo n√£o tiver informa√ß√µes suficientes ESPECIFICAMENTE sobre ${ticker}, retorne score 50 com resumo indicando "Informa√ß√µes insuficientes sobre ${ticker} no v√≠deo"
- VERIFICA√á√ÉO: Antes de adicionar qualquer ponto positivo ou negativo, confirme que ele se refere ESPECIFICAMENTE a ${ticker}, n√£o a outras empresas mencionadas no v√≠deo

**Sua an√°lise deve incluir:**

1. **Score Geral (0-100)**: Avalie o sentimento geral sobre a empresa baseado no conte√∫do dos v√≠deos:
   - 0-30: Sentimento muito negativo (problemas graves, recomenda√ß√£o de venda)
   - 31-50: Sentimento negativo (preocupa√ß√µes, cautela)
   - 51-70: Sentimento neutro ou misto (pontos positivos e negativos equilibrados)
   - 71-85: Sentimento positivo (bons fundamentos, otimismo)
   - 86-100: Sentimento muito positivo (excelentes perspectivas, forte recomenda√ß√£o)

2. **Resumo**: Descri√ß√£o concisa (m√°ximo 280 caracteres) dos pontos-chave discutidos nos v√≠deos SOBRE ${ticker}
   - Seja direto e objetivo
   - Foque no que √© mais relevante para investidores
   - Mencione APENAS ${ticker}, n√£o outras empresas

3. **Pontos Positivos**: Lista de aspectos favor√°veis mencionados ESPECIFICAMENTE sobre ${ticker}
   - M√°ximo 4 pontos mais relevantes
   - Seja espec√≠fico e factual
   - Priorize dados concretos (n√∫meros, fatos)
   - Cada ponto deve mencionar ${ticker} ou ser claramente sobre ${ticker}

4. **Pontos Negativos**: Lista de preocupa√ß√µes ou riscos mencionados ESPECIFICAMENTE sobre ${ticker}
   - M√°ximo 4 pontos mais relevantes
   - Seja espec√≠fico e factual
   - Priorize riscos reais e tang√≠veis
   - Cada ponto deve mencionar ${ticker} ou ser claramente sobre ${ticker}

**DIRETRIZES DE AN√ÅLISE:**
- Baseie sua an√°lise APENAS no conte√∫do dos v√≠deos E APENAS sobre ${ticker}
- Seja objetivo e imparcial
- Priorize informa√ß√µes fundamentalistas (resultados, dividendos, d√≠vida, crescimento, margens)
- Ignore ru√≠dos, especula√ß√µes sem fundamento e opini√µes pessoais dos apresentadores
- Se os v√≠deos mencionarem dados conflitantes, use o mais recente ou confi√°vel
- Evite jarg√µes excessivos - use linguagem clara
- NUNCA misture informa√ß√µes de outras empresas mencionadas no v√≠deo

Formato da resposta (JSON v√°lido):
{
  "score": 75,
  "summary": "Empresa apresentou resultados s√≥lidos no trimestre com crescimento de receita de 15% e redu√ß√£o de d√≠vida.",
  "positivePoints": [
    "Crescimento de receita de 15% no √∫ltimo trimestre",
    "Redu√ß√£o da d√≠vida l√≠quida em 20%",
    "Aumento de dividendos aprovado para 2024"
  ],
  "negativePoints": [
    "Margem EBITDA em queda de 2 pontos percentuais",
    "Preocupa√ß√µes com cen√°rio macroecon√¥mico e juros altos"
  ]
}

Retorne APENAS o JSON, sem nenhum texto adicional antes ou depois.`;

      const tools = [
        {
          googleSearch: {},
        },
      ];

      const config = {
        thinkingConfig: {
          thinkingBudget: -1,
        },
        tools,
      };

      const model = 'gemini-flash-lite-latest';
      
      // Construir parts com os v√≠deos
      const parts: any[] = [];
      
      // Adicionar v√≠deos como fileData
      videoIds.forEach((videoId) => {
        parts.push({
          fileData: {
            fileUri: `https://www.youtube.com/watch?v=${videoId}`,
            mimeType: 'video/*',
          },
        });
      });
      
      // Adicionar prompt
      parts.push({ text: prompt });

      const contents = [
        {
          role: 'user',
          parts,
        },
      ];

      console.log(`üé¨ Analisando ${videoIds.length} v√≠deo(s) para ${ticker}...`);

      const response = await ai.models.generateContentStream({
        model,
        config,
        contents,
      });

      let fullResponse = '';
      for await (const chunk of response) {
        if (chunk.text) {
          fullResponse += chunk.text;
        }
      }

      if (!fullResponse || fullResponse.trim().length === 0) {
        throw new Error('Gemini retornou resposta vazia');
      }

      console.log(`üìä Resposta da an√°lise recebida (${fullResponse.length} caracteres)`);
      console.log(`üìù Preview: ${fullResponse.substring(0, 150)}...`);

      // Extrair JSON da resposta
      const jsonMatch = fullResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta da an√°lise n√£o cont√©m JSON v√°lido');
      }

      const parsedResult: YouTubeAnalysisResult = JSON.parse(jsonMatch[0]);

      // Validar resultado
      if (
        typeof parsedResult.score !== 'number' ||
        parsedResult.score < 0 ||
        parsedResult.score > 100
      ) {
        throw new Error('Score inv√°lido na resposta da an√°lise');
      }

      if (!parsedResult.summary || typeof parsedResult.summary !== 'string') {
        throw new Error('Summary inv√°lido na resposta da an√°lise');
      }

      // Garantir que positivePoints e negativePoints s√£o arrays (mesmo que vazios)
      parsedResult.positivePoints = Array.isArray(parsedResult.positivePoints)
        ? parsedResult.positivePoints
        : [];
      parsedResult.negativePoints = Array.isArray(parsedResult.negativePoints)
        ? parsedResult.negativePoints
        : [];

      console.log(`‚úÖ An√°lise conclu√≠da para ${ticker}: Score ${parsedResult.score}/100`);

      return parsedResult;
    } catch (error: any) {
      console.error(`‚ùå Erro ao analisar v√≠deos para ${ticker}:`, error);
      
      // Tratamento espec√≠fico para erro de muitos frames (v√≠deo muito longo)
      if (error?.message?.includes('Please use fewer than') || 
          error?.message?.includes('images in your request') ||
          error?.code === 400) {
        console.error(`üé• ${ticker}: V√≠deo(s) muito longo(s) (excede limite de frames da API)`);
        throw new Error(`V√≠deo muito longo - excede limite de processamento da API. Tente v√≠deos mais curtos.`);
      }
      
      // Erro gen√©rico
      throw error;
    }
  }

  /**
   * Busca e analisa conte√∫do web sobre a empresa (alternativa/complemento ao YouTube)
   */
  static async analyzeWebContent(
    ticker: string,
    companyName: string,
    sector?: string,
    industry?: string
  ): Promise<WebContentAnalysisResult> {
    try {
      console.log(`üåê ${ticker}: Analisando conte√∫do web (blogs, not√≠cias, portais)...`);

      const ai = new GoogleGenAI({
        apiKey: process.env.GEMINI_API_KEY,
      });

      const prompt = `Voc√™ √© um analista fundamentalista especializado em a√ß√µes brasileiras.

Busque e analise informa√ß√µes recentes (√∫ltimos 3-6 meses) sobre a empresa ${companyName} (${ticker}) em fontes confi√°veis da internet:

**FONTES PRIORIT√ÅRIAS (focar apenas em fontes profissionais):**
- InfoMoney, Valor Econ√¥mico, Estad√£o E-Investidor
- Blogs: Clube do Valor, Nord Research, Suno Research
- Sites especializados: TradeMap, Investidor10, Status Invest
- Portais: Bloomberg Brasil, Reuters Brasil
- Relat√≥rios e comunicados oficiais da empresa
${sector ? `- An√°lises espec√≠ficas do setor: ${sector}` : ''}
${industry ? `- Not√≠cias da ind√∫stria: ${industry}` : ''}

**CRIT√âRIOS DE BUSCA:**
1. Priorizar an√°lises fundamentalistas profissionais
2. Focar em not√≠cias e an√°lises dos √∫ltimos 3-6 meses
3. Buscar informa√ß√µes sobre:
   - Resultados trimestrais/anuais recentes
   - Proje√ß√µes e guidance
   - Dividendos e proventos
   - Eventos corporativos relevantes
   - An√°lises de analistas profissionais
   - Not√≠cias materiais que impactam a empresa
4. Evitar fontes n√£o confi√°veis, f√≥runs, redes sociais
5. Desconsiderar an√°lises t√©cnicas (gr√°ficos, suportes, resist√™ncias)

**IMPORTANTE:**
- Se n√£o encontrar informa√ß√µes relevantes ou a empresa n√£o tiver cobertura adequada, retorne score 50 (neutro) e explique no summary
- Cite as principais fontes utilizadas
- Seja objetivo e baseie-se apenas em fatos

**Sua an√°lise deve incluir:**

1. **Score Geral (0-100)**: Baseado no sentimento consolidado das fontes
   - 0-30: Muito negativo (problemas graves, recomenda√ß√µes de venda)
   - 31-50: Negativo (preocupa√ß√µes, cautela)
   - 51-70: Neutro ou misto (equil√≠brio de pontos)
   - 71-85: Positivo (bons fundamentos, otimismo)
   - 86-100: Muito positivo (excelentes perspectivas)

2. **Resumo** (m√°ximo 280 caracteres):
   - Consolida√ß√£o objetiva dos principais pontos encontrados
   - Foque no que √© mais relevante para investidores

3. **Pontos Positivos** (m√°ximo 4):
   - Aspectos favor√°veis mencionados nas fontes
   - Seja espec√≠fico e factual
   - Priorize dados concretos

4. **Pontos Negativos** (m√°ximo 4):
   - Preocupa√ß√µes ou riscos mencionados
   - Seja espec√≠fico e factual
   - Priorize riscos reais

5. **Fontes** (m√°ximo 5 URLs):
   - URLs das principais fontes utilizadas
   - Priorize fontes mais relevantes e recentes

**DIRETRIZES:**
- Seja objetivo e imparcial
- Priorize informa√ß√µes fundamentalistas
- Ignore especula√ß√µes e rumores
- Use informa√ß√µes recentes (3-6 meses)
- Se houver conflito de informa√ß√µes, use a fonte mais confi√°vel

Formato da resposta (JSON v√°lido):
{
  "score": 72,
  "summary": "Empresa reportou crescimento de receita no √∫ltimo trimestre, mas margem EBITDA em queda preocupa analistas.",
  "positivePoints": [
    "Crescimento de receita de 12% no trimestre",
    "Redu√ß√£o da d√≠vida l√≠quida em 15%",
    "Dividendos aprovados acima do esperado"
  ],
  "negativePoints": [
    "Margem EBITDA caiu 3 p.p. no per√≠odo",
    "Cen√°rio macroecon√¥mico desafiador"
  ],
  "sources": [
    "https://www.infomoney.com.br/...",
    "https://www.clubedovalor.com.br/...",
    "https://ri.empresa.com.br/..."
  ]
}

Retorne APENAS o JSON, sem nenhum texto adicional antes ou depois.`;

      const tools = [
        {
          googleSearch: {},
        },
      ];

      const config = {
        thinkingConfig: {
          thinkingBudget: -1,
        },
        tools,
      };

      const model = 'gemini-2.5-flash';

      const contents = [
        {
          role: 'user',
          parts: [
            {
              text: prompt,
            },
          ],
        },
      ];

      const response = await ai.models.generateContentStream({
        model,
        config,
        contents,
      });

      let fullResponse = '';
      for await (const chunk of response) {
        if (chunk.text) {
          fullResponse += chunk.text;
        }
      }

      if (!fullResponse || fullResponse.trim().length === 0) {
        throw new Error('Gemini retornou resposta vazia para an√°lise web');
      }

      console.log(`üìä Resposta da an√°lise web recebida (${fullResponse.length} caracteres)`);

      // Extrair JSON da resposta
      const jsonMatch = fullResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Resposta da an√°lise web n√£o cont√©m JSON v√°lido');
      }

      const parsedResult: WebContentAnalysisResult = JSON.parse(jsonMatch[0]);

      // Validar campos obrigat√≥rios
      if (
        typeof parsedResult.score !== 'number' ||
        !parsedResult.summary ||
        !Array.isArray(parsedResult.positivePoints) ||
        !Array.isArray(parsedResult.negativePoints) ||
        !Array.isArray(parsedResult.sources)
      ) {
        throw new Error('Resposta da an√°lise web tem formato inv√°lido');
      }

      // Garantir que arrays n√£o sejam null
      parsedResult.positivePoints = Array.isArray(parsedResult.positivePoints)
        ? parsedResult.positivePoints
        : [];
      parsedResult.negativePoints = Array.isArray(parsedResult.negativePoints)
        ? parsedResult.negativePoints
        : [];
      parsedResult.sources = Array.isArray(parsedResult.sources)
        ? parsedResult.sources
        : [];

      console.log(
        `‚úÖ An√°lise web conclu√≠da para ${ticker}: Score ${parsedResult.score}/100, ${parsedResult.sources.length} fonte(s)`
      );

      return parsedResult;
    } catch (error: any) {
      console.error(`‚ùå Erro ao analisar conte√∫do web para ${ticker}:`, error);
      throw error;
    }
  }

  /**
   * Combina an√°lise do YouTube com an√°lise web para resultado mais completo
   */
  static combineAnalyses(
    youtubeAnalysis: YouTubeAnalysisResult,
    webAnalysis: WebContentAnalysisResult,
    ticker: string
  ): YouTubeAnalysisResult {
    console.log(`üîó ${ticker}: Combinando an√°lise YouTube + Web...`);

    // Score combinado: 70% YouTube + 30% Web
    const combinedScore = Math.round(
      youtubeAnalysis.score * 0.7 + webAnalysis.score * 0.3
    );

    // Summary combinado (prioriza YouTube, complementa com web se houver diverg√™ncia significativa)
    let combinedSummary = youtubeAnalysis.summary;
    
    // Se h√° diferen√ßa significativa de score (>20 pontos), mencionar fontes web
    const scoreDifference = Math.abs(youtubeAnalysis.score - webAnalysis.score);
    if (scoreDifference > 20) {
      const webSentiment = webAnalysis.score > youtubeAnalysis.score ? 'mais positivas' : 'mais cautelosas';
      combinedSummary = `${youtubeAnalysis.summary} Fontes web mostram perspectiva ${webSentiment}.`;
    }

    // Combinar pontos positivos (deduplica e mant√©m at√© 4)
    const allPositivePoints = [
      ...youtubeAnalysis.positivePoints,
      ...webAnalysis.positivePoints.map(p => `[Web] ${p}`)
    ];
    const uniquePositivePoints = Array.from(new Set(allPositivePoints)).slice(0, 4);

    // Combinar pontos negativos (deduplica e mant√©m at√© 4)
    const allNegativePoints = [
      ...youtubeAnalysis.negativePoints,
      ...webAnalysis.negativePoints.map(p => `[Web] ${p}`)
    ];
    const uniqueNegativePoints = Array.from(new Set(allNegativePoints)).slice(0, 4);

    console.log(
      `‚úÖ ${ticker}: An√°lise combinada - Score ${combinedScore}/100 (YouTube: ${youtubeAnalysis.score}, Web: ${webAnalysis.score})`
    );

    return {
      score: combinedScore,
      summary: combinedSummary,
      positivePoints: uniquePositivePoints,
      negativePoints: uniqueNegativePoints,
    };
  }

  /**
   * Busca an√°lise de empresa relacionada (mesmo nome base, ex: PETR3/PETR4)
   */
  static async findRelatedCompanyAnalysis(ticker: string, companyName: string): Promise<{
    companyId: number;
    analysis: SavedYouTubeAnalysis;
  } | null> {
    try {
      // Extrair ticker base (remover TODOS os n√∫meros finais)
      // Ex: PETR3 ‚Üí PETR, PETR4 ‚Üí PETR, ALUP11 ‚Üí ALUP, ALUP3 ‚Üí ALUP
      const tickerBase = ticker.replace(/\d+$/, '');
      
      console.log(`üîó ${ticker}: Buscando an√°lises relacionadas (base: ${tickerBase})`);
      
      // Buscar empresas com ticker similar
      const relatedCompanies = await prisma.company.findMany({
        where: {
          OR: [
            { ticker: { startsWith: tickerBase } },
            { name: companyName }
          ],
          NOT: {
            ticker
          }
        },
        include: {
          youtubeAnalyses: {
            where: { isActive: true },
            orderBy: { createdAt: 'desc' },
            take: 1
          }
        }
      });
      
      console.log(`üîó ${ticker}: Encontradas ${relatedCompanies.length} empresas relacionadas:`, 
        relatedCompanies.map(c => c.ticker).join(', '));

      // Procurar primeira empresa com an√°lise v√°lida (n√£o vazia)
      for (const company of relatedCompanies) {
        console.log(`üîó ${ticker}: Verificando ${company.ticker}...`);
        
        if (company.youtubeAnalyses && company.youtubeAnalyses.length > 0) {
          const analysis = company.youtubeAnalyses[0];
          
          // Verificar se n√£o √© an√°lise vazia
          const videoIds = analysis.videoIds as string[];
          const isEmptyAnalysis = Array.isArray(videoIds) && videoIds.length === 0;
          
          console.log(`üîó ${ticker}: ${company.ticker} tem an√°lise com ${videoIds?.length || 0} v√≠deos (vazia: ${isEmptyAnalysis})`);
          
          if (!isEmptyAnalysis) {
            console.log(`‚úÖ ${ticker}: Encontrada an√°lise relacionada em ${company.ticker}, copiando...`);
            
            return {
              companyId: company.id,
              analysis: {
                id: analysis.id,
                companyId: analysis.companyId,
                score: parseFloat(analysis.score.toString()),
                summary: analysis.summary,
                positivePoints: analysis.positivePoints as string[] | null,
                negativePoints: analysis.negativePoints as string[] | null,
                videoIds: analysis.videoIds as string[],
                isActive: analysis.isActive,
                createdAt: analysis.createdAt,
                updatedAt: analysis.updatedAt
              }
            };
          } else {
            console.log(`‚ö†Ô∏è ${ticker}: An√°lise de ${company.ticker} est√° vazia, ignorando...`);
          }
        } else {
          console.log(`‚ö†Ô∏è ${ticker}: ${company.ticker} n√£o tem an√°lise ativa`);
        }
      }

      console.log(`‚ùå ${ticker}: Nenhuma an√°lise relacionada v√°lida encontrada`);
      return null;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar an√°lise relacionada para ${ticker}:`, error);
      return null;
    }
  }

  /**
   * Copia an√°lise de empresa relacionada para a empresa atual
   */
  static async copyAnalysisFromRelated(
    targetCompanyId: number,
    sourceAnalysis: SavedYouTubeAnalysis,
    sourceTicker: string,
    targetTicker: string
  ): Promise<string> {
    try {
      console.log(`üìã ${targetTicker}: Copiando an√°lise de ${sourceTicker}...`);
      
      // Marcar an√°lises anteriores como inativas
      await safeWrite(
        'deactivate-previous-youtube-analyses',
        () =>
          prisma.youTubeAnalysis.updateMany({
            where: {
              companyId: targetCompanyId,
              isActive: true,
            },
            data: {
              isActive: false,
            },
          }),
        ['youtube_analyses']
      );

      // Criar c√≥pia da an√°lise
      const copiedAnalysis = await safeWrite(
        'copy-youtube-analysis',
        () =>
          prisma.youTubeAnalysis.create({
            data: {
              companyId: targetCompanyId,
              score: sourceAnalysis.score,
              summary: sourceAnalysis.summary,
              positivePoints: sourceAnalysis.positivePoints || undefined,
              negativePoints: sourceAnalysis.negativePoints || undefined,
              videoIds: sourceAnalysis.videoIds,
              isActive: true,
            },
          }),
        ['youtube_analyses']
      );

      console.log(`‚úÖ ${targetTicker}: An√°lise copiada de ${sourceTicker} (Score: ${sourceAnalysis.score}/100)`);

      return (copiedAnalysis as any).id;
    } catch (error) {
      console.error(`‚ùå Erro ao copiar an√°lise para companyId ${targetCompanyId}:`, error);
      throw error;
    }
  }

  /**
   * Salva an√°lise vazia quando n√£o h√° v√≠deos (para evitar reprocessamento)
   */
  static async saveEmptyAnalysis(
    companyId: number,
    reason: string
  ): Promise<string> {
    try {
      // Marcar an√°lises anteriores como inativas
      await safeWrite(
        'deactivate-previous-youtube-analyses',
        () =>
          prisma.youTubeAnalysis.updateMany({
            where: {
              companyId,
              isActive: true,
            },
            data: {
              isActive: false,
            },
          }),
        ['youtube_analyses']
      );

      // Criar an√°lise vazia com score neutro
      const emptyAnalysis = await safeWrite(
        'create-empty-youtube-analysis',
        () =>
          prisma.youTubeAnalysis.create({
            data: {
              companyId,
              score: 50, // Score neutro
              summary: reason,
              positivePoints: undefined,
              negativePoints: undefined,
              videoIds: [], // Array vazio
              isActive: true,
            },
          }),
        ['youtube_analyses']
      );

      console.log(`üíæ An√°lise vazia salva para companyId ${companyId} (sem v√≠deos dispon√≠veis)`);

      return (emptyAnalysis as any).id;
    } catch (error) {
      console.error(`‚ùå Erro ao salvar an√°lise vazia para companyId ${companyId}:`, error);
      throw error;
    }
  }

  /**
   * Salva an√°lise no banco de dados (marca anterior como inativa)
   */
  static async saveAnalysis(
    companyId: number,
    videoIds: string[],
    analysisResult: YouTubeAnalysisResult
  ): Promise<string> {
    try {
      // Marcar an√°lises anteriores como inativas
      await safeWrite(
        'deactivate-previous-youtube-analyses',
        () =>
          prisma.youTubeAnalysis.updateMany({
            where: {
              companyId,
              isActive: true,
            },
            data: {
              isActive: false,
            },
          }),
        ['youtube_analyses']
      );

      // Criar nova an√°lise
      const newAnalysis = await safeWrite(
        'create-youtube-analysis',
        () =>
          prisma.youTubeAnalysis.create({
            data: {
              companyId,
              score: analysisResult.score,
              summary: analysisResult.summary, // Limitar tamanho
              positivePoints: analysisResult.positivePoints.length > 0 
                ? analysisResult.positivePoints 
                : undefined,
              negativePoints: analysisResult.negativePoints.length > 0 
                ? analysisResult.negativePoints 
                : undefined,
              videoIds,
              isActive: true,
            },
          }),
        ['youtube_analyses']
      );

      console.log(`üíæ An√°lise salva para companyId ${companyId}: ${(newAnalysis as any).id}`);

      return (newAnalysis as any).id;
    } catch (error) {
      console.error(`‚ùå Erro ao salvar an√°lise para companyId ${companyId}:`, error);
      throw error;
    }
  }

  /**
   * Busca an√°lise ativa de uma empresa
   */
  static async getActiveAnalysis(companyId: number): Promise<SavedYouTubeAnalysis | null> {
    try {
      const analysis = await safeQueryWithParams(
        'get-active-youtube-analysis',
        () =>
          prisma.youTubeAnalysis.findFirst({
            where: {
              companyId,
              isActive: true,
            },
            orderBy: {
              createdAt: 'desc',
            },
          }),
        { companyId }
      );

      if (!analysis) {
        return null;
      }

      return {
        id: (analysis as any).id,
        companyId: (analysis as any).companyId,
        score: parseFloat((analysis as any).score.toString()),
        summary: (analysis as any).summary,
        positivePoints: (analysis as any).positivePoints as string[] | null,
        negativePoints: (analysis as any).negativePoints as string[] | null,
        videoIds: (analysis as any).videoIds as string[],
        isActive: (analysis as any).isActive,
        createdAt: (analysis as any).createdAt,
        updatedAt: (analysis as any).updatedAt,
      };
    } catch (error) {
      console.error(`‚ùå Erro ao buscar an√°lise ativa para companyId ${companyId}:`, error);
      return null;
    }
  }

  /**
   * Compara IDs de v√≠deos para verificar se s√£o os mesmos
   */
  static areVideoIdsSame(ids1: string[], ids2: string[]): boolean {
    if (ids1.length !== ids2.length) {
      return false;
    }

    const sorted1 = [...ids1].sort();
    const sorted2 = [...ids2].sort();

    return sorted1.every((id, index) => id === sorted2[index]);
  }

  /**
   * Busca pr√≥ximo lote de empresas para processar
   * Prioriza: 1) Empresas nunca verificadas, 2) Empresas verificadas h√° mais tempo
   * Filtra: Apenas empresas lucrativas com ROE positivo
   */
  static async getNextBatchToProcess(batchSize: number) {
    try {
      const currentYear = new Date().getFullYear();
      const oneWeekAgo = new Date();
      oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

      const baseWhere = {
        // Filtrar apenas empresas com dados financeiros recentes
        financialData: {
          some: {
            year: { gte: currentYear - 1 },
            // ROE positivo
            roe: { gt: 0 },
            // Lucrativas (lucro l√≠quido positivo)
            lucroLiquido: { gt: 0 },
          },
        },
      };

      const includeConfig = {
        youtubeAnalyses: {
          where: { isActive: true },
          orderBy: { createdAt: 'desc' as const },
          take: 1,
        },
        financialData: {
          where: {
            year: { gte: currentYear - 1 },
          },
          orderBy: { year: 'desc' as const },
          take: 1,
          select: {
            roe: true,
            lucroLiquido: true,
            year: true,
          },
        },
      };

      // Primeiro busca empresas que nunca foram verificadas (youtubeLastCheckedAt null)
      console.log(`üîç Buscando empresas nunca verificadas...`);
      const unprocessed = await prisma.company.findMany({
        where: {
          ...baseWhere,
          youtubeLastCheckedAt: null,
        },
        include: includeConfig,
        take: batchSize,
      });

      console.log(`üìä Encontradas ${unprocessed.length} empresas nunca verificadas`);

      // Se j√° temos o batchSize completo, retorna
      if (unprocessed.length >= batchSize) {
        return this.filterEmptyAnalyses(unprocessed, oneWeekAgo, batchSize);
      }

      // Caso contr√°rio, busca as mais antigas para completar o lote
      const remaining = batchSize - unprocessed.length;
      console.log(`üîç Buscando ${remaining} empresas mais antigas para completar o lote...`);
      
      const oldest = await prisma.company.findMany({
        where: {
          ...baseWhere,
          youtubeLastCheckedAt: { not: null },
        },
        include: includeConfig,
        orderBy: { youtubeLastCheckedAt: 'asc' },
        take: remaining * 2, // Buscar mais para compensar filtro de an√°lises vazias
      });

      console.log(`üìä Encontradas ${oldest.length} empresas j√° verificadas`);

      const allCompanies = [...unprocessed, ...oldest];
      return this.filterEmptyAnalyses(allCompanies, oneWeekAgo, batchSize);
    } catch (error) {
      console.error('‚ùå Erro ao buscar pr√≥ximo lote de empresas:', error);
      return [];
    }
  }

  /**
   * Filtra empresas com an√°lises recentes (< 1 semana)
   */
  private static filterEmptyAnalyses(
    companies: any[],
    oneWeekAgo: Date,
    batchSize: number
  ): any[] {
    const filtered = companies.filter((company) => {
      const hasAnalysis = company.youtubeAnalyses?.length > 0;
      if (!hasAnalysis) return true;

      const latestAnalysis = company.youtubeAnalyses[0];

      // Verificar se √© an√°lise vazia (sem v√≠deos)
      const isEmptyAnalysis =
        Array.isArray(latestAnalysis.videoIds) &&
        latestAnalysis.videoIds.length === 0;

      // TODAS as an√°lises (vazias ou com v√≠deos) devem aguardar 1 semana para reprocessamento
      if (latestAnalysis.updatedAt > oneWeekAgo) {
        if (isEmptyAnalysis) {
          console.log(
            `‚è≠Ô∏è ${company.ticker}: An√°lise vazia recente (< 7 dias), pulando...`
          );
        } else {
          console.log(
            `‚è≠Ô∏è ${company.ticker}: An√°lise existente recente (< 7 dias), pulando...`
          );
        }
        return false;
      }

      return true;
    });

    console.log(
      `üîç Filtro aplicado: ${filtered.length} empresas eleg√≠veis (ROE+ e lucrativas, sem an√°lises recentes < 7 dias)`
    );

    return filtered.slice(0, batchSize);
  }

  /**
   * Atualiza youtubeLastCheckedAt de uma empresa
   */
  static async updateLastChecked(companyId: number): Promise<void> {
    try {
      await safeWrite(
        'update-company-youtube-last-checked',
        () =>
          prisma.company.update({
            where: { id: companyId },
            data: { youtubeLastCheckedAt: new Date() },
          }),
        ['companies']
      );
    } catch (error) {
      console.error(`‚ùå Erro ao atualizar youtubeLastCheckedAt para companyId ${companyId}:`, error);
    }
  }
}

